
led_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004660  08004660  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004668  08004668  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000048  080046b8  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080046b8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c901  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9d  00000000  00000000  0002c971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002ef68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b51b  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be16  00000000  00000000  0004ad33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0e64  00000000  00000000  00056b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001079ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002070  00000000  00000000  00107a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000048 	.word	0x20000048
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080045c0 	.word	0x080045c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000004c 	.word	0x2000004c
 8000100:	080045c0 	.word	0x080045c0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa2a 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f826 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8ba 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f86a 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Transmit(&huart2, tx_data,sizeof(tx_data), 10);
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <main+0x48>)
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <main+0x4c>)
 8000634:	230a      	movs	r3, #10
 8000636:	223c      	movs	r2, #60	; 0x3c
 8000638:	f001 fdfa 	bl	8002230 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800063c:	490b      	ldr	r1, [pc, #44]	; (800066c <main+0x50>)
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <main+0x4c>)
 8000640:	2201      	movs	r2, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fe98 	bl	8002378 <HAL_UART_Receive_IT>

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4a08      	ldr	r2, [pc, #32]	; (8000670 <main+0x54>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 fdea 	bl	800122a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000656:	23fa      	movs	r3, #250	; 0xfa
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fa92 	bl	8000b84 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000660:	e7f2      	b.n	8000648 <main+0x2c>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000000 	.word	0x20000000
 8000668:	20000064 	.word	0x20000064
 800066c:	200000f8 	.word	0x200000f8
 8000670:	50000400 	.word	0x50000400

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b095      	sub	sp, #84	; 0x54
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	233c      	movs	r3, #60	; 0x3c
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 ff93 	bl	80045b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f003 ff8c 	bl	80045b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fddf 	bl	8001260 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2202      	movs	r2, #2
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fe17 	bl	80012f8 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ce:	f000 f8ed 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2100      	movs	r1, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 f962 	bl	80019b8 <HAL_RCC_ClockConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006f8:	f000 f8d8 	bl	80008ac <Error_Handler>
  }
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b015      	add	sp, #84	; 0x54
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <MX_USART2_UART_Init+0x98>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fd18 	bl	8002184 <HAL_UART_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000758:	f000 f8a8 	bl	80008ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x94>)
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f003 fe21 	bl	80043a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f89f 	bl	80008ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f003 fe58 	bl	8004428 <HAL_UARTEx_SetRxFifoThreshold>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800077c:	f000 f896 	bl	80008ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x94>)
 8000782:	0018      	movs	r0, r3
 8000784:	f003 fdd6 	bl	8004334 <HAL_UARTEx_DisableFifoMode>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 f88e 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000064 	.word	0x20000064
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	240c      	movs	r4, #12
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2314      	movs	r3, #20
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f003 fefd 	bl	80045b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007d4:	2102      	movs	r1, #2
 80007d6:	430a      	orrs	r2, r1
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_GPIO_Init+0xac>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fcff 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	193b      	adds	r3, r7, r4
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <MX_GPIO_Init+0xac>)
 800080e:	0019      	movs	r1, r3
 8000810:	0010      	movs	r0, r2
 8000812:	f000 fb81 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	0052      	lsls	r2, r2, #1
 800081e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	187b      	adds	r3, r7, r1
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <MX_GPIO_Init+0xac>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f000 fb6d 	bl	8000f18 <HAL_GPIO_Init>

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b009      	add	sp, #36	; 0x24
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40021000 	.word	0x40021000
 800084c:	50000400 	.word	0x50000400

08000850 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000858:	4911      	ldr	r1, [pc, #68]	; (80008a0 <HAL_UART_RxCpltCallback+0x50>)
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_UART_RxCpltCallback+0x54>)
 800085c:	2201      	movs	r2, #1
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fd8a 	bl	8002378 <HAL_UART_Receive_IT>

	  if(rx_data == '1')
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_UART_RxCpltCallback+0x50>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b31      	cmp	r3, #49	; 0x31
 800086a:	d105      	bne.n	8000878 <HAL_UART_RxCpltCallback+0x28>
	   {
	   	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_UART_RxCpltCallback+0x58>)
 800086e:	2201      	movs	r2, #1
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	0018      	movs	r0, r3
 8000874:	f000 fcbc 	bl	80011f0 <HAL_GPIO_WritePin>
	   }
	   if(rx_data == '2')
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_UART_RxCpltCallback+0x50>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b32      	cmp	r3, #50	; 0x32
 800087e:	d105      	bne.n	800088c <HAL_UART_RxCpltCallback+0x3c>
	   {
	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_UART_RxCpltCallback+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fcb2 	bl	80011f0 <HAL_GPIO_WritePin>
	   }
	   HAL_UART_Transmit(huart, &rx_data, 1, 10);
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <HAL_UART_RxCpltCallback+0x50>)
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	230a      	movs	r3, #10
 8000892:	2201      	movs	r2, #1
 8000894:	f001 fccc 	bl	8002230 <HAL_UART_Transmit>


}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000f8 	.word	0x200000f8
 80008a4:	20000064 	.word	0x20000064
 80008a8:	50000400 	.word	0x50000400

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0549      	lsls	r1, r1, #21
 80008e0:	430a      	orrs	r2, r1
 80008e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_MspInit+0x44>)
 80008e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	055b      	lsls	r3, r3, #21
 80008ec:	4013      	ands	r3, r2
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b09d      	sub	sp, #116	; 0x74
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	235c      	movs	r3, #92	; 0x5c
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f003 fe4c 	bl	80045b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	2410      	movs	r4, #16
 800091a:	193b      	adds	r3, r7, r4
 800091c:	0018      	movs	r0, r3
 800091e:	234c      	movs	r3, #76	; 0x4c
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f003 fe44 	bl	80045b0 <memset>
  if(huart->Instance==USART2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <HAL_UART_MspInit+0xc8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d146      	bne.n	80009c0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2202      	movs	r2, #2
 8000936:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	f001 f9e3 	bl	8001d0c <HAL_RCCEx_PeriphCLKConfig>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800094a:	f7ff ffaf 	bl	80008ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_UART_MspInit+0xcc>)
 8000950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_UART_MspInit+0xcc>)
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0289      	lsls	r1, r1, #10
 8000958:	430a      	orrs	r2, r1
 800095a:	63da      	str	r2, [r3, #60]	; 0x3c
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_UART_MspInit+0xcc>)
 800095e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	029b      	lsls	r3, r3, #10
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_UART_MspInit+0xcc>)
 800096c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_UART_MspInit+0xcc>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_UART_MspInit+0xcc>)
 8000978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000982:	215c      	movs	r1, #92	; 0x5c
 8000984:	187b      	adds	r3, r7, r1
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2202      	movs	r2, #2
 800098e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2201      	movs	r2, #1
 8000994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2201      	movs	r2, #1
 80009a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	187a      	adds	r2, r7, r1
 80009a4:	23a0      	movs	r3, #160	; 0xa0
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fab4 	bl	8000f18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	201c      	movs	r0, #28
 80009b6:	f000 f9b5 	bl	8000d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80009ba:	201c      	movs	r0, #28
 80009bc:	f000 f9c7 	bl	8000d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b01d      	add	sp, #116	; 0x74
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8aa 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <USART2_LPUART2_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fd1c 	bl	8002444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000064 	.word	0x20000064

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f7ff fff6 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f003 fd89 	bl	8004568 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a56:	f7ff fde1 	bl	800061c <main>

08000a5a <LoopForever>:

LoopForever:
  b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000a68:	08004670 	.word	0x08004670
  ldr r2, =_sbss
 8000a6c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000a70:	20000100 	.word	0x20000100

08000a74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_COMP_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x3c>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_Init+0x3c>)
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	0049      	lsls	r1, r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	2003      	movs	r0, #3
 8000a94:	f000 f810 	bl	8000ab8 <HAL_InitTick>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e001      	b.n	8000aa8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff ff08 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_InitTick+0x88>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d02b      	beq.n	8000b28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_InitTick+0x8c>)
 8000ad2:	681c      	ldr	r4, [r3, #0]
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <HAL_InitTick+0x88>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	0019      	movs	r1, r3
 8000ada:	23fa      	movs	r3, #250	; 0xfa
 8000adc:	0098      	lsls	r0, r3, #2
 8000ade:	f7ff fb11 	bl	8000104 <__udivsi3>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff fb0c 	bl	8000104 <__udivsi3>
 8000aec:	0003      	movs	r3, r0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f93d 	bl	8000d6e <HAL_SYSTICK_Config>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d112      	bne.n	8000b1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d80a      	bhi.n	8000b14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f90c 	bl	8000d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_InitTick+0x90>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e00d      	b.n	8000b30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	781b      	ldrb	r3, [r3, #0]
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b005      	add	sp, #20
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000044 	.word	0x20000044
 8000b44:	2000003c 	.word	0x2000003c
 8000b48:	20000040 	.word	0x20000040

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000044 	.word	0x20000044
 8000b6c:	200000fc 	.word	0x200000fc

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200000fc 	.word	0x200000fc

08000b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b8c:	f7ff fff0 	bl	8000b70 <HAL_GetTick>
 8000b90:	0003      	movs	r3, r0
 8000b92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	d005      	beq.n	8000baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_Delay+0x44>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	189b      	adds	r3, r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	f7ff ffe0 	bl	8000b70 <HAL_GetTick>
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d8f7      	bhi.n	8000bac <HAL_Delay+0x28>
  {
  }
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000044 	.word	0x20000044

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bde:	d809      	bhi.n	8000bf4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	001a      	movs	r2, r3
 8000be6:	231f      	movs	r3, #31
 8000be8:	401a      	ands	r2, r3
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_EnableIRQ+0x30>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	000a      	movs	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0002      	movs	r2, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b7f      	cmp	r3, #127	; 0x7f
 8000c14:	d828      	bhi.n	8000c68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c16:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <__NVIC_SetPriority+0xd4>)
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	33c0      	adds	r3, #192	; 0xc0
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	589b      	ldr	r3, [r3, r2]
 8000c26:	1dfa      	adds	r2, r7, #7
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	400a      	ands	r2, r1
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	21ff      	movs	r1, #255	; 0xff
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	401a      	ands	r2, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	4003      	ands	r3, r0
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	481f      	ldr	r0, [pc, #124]	; (8000cd4 <__NVIC_SetPriority+0xd4>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	33c0      	adds	r3, #192	; 0xc0
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c66:	e031      	b.n	8000ccc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <__NVIC_SetPriority+0xd8>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	0019      	movs	r1, r3
 8000c70:	230f      	movs	r3, #15
 8000c72:	400b      	ands	r3, r1
 8000c74:	3b08      	subs	r3, #8
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3306      	adds	r3, #6
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	3304      	adds	r3, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1dfa      	adds	r2, r7, #7
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	0011      	movs	r1, r2
 8000c88:	2203      	movs	r2, #3
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	00d2      	lsls	r2, r2, #3
 8000c8e:	21ff      	movs	r1, #255	; 0xff
 8000c90:	4091      	lsls	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	43d2      	mvns	r2, r2
 8000c96:	401a      	ands	r2, r3
 8000c98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	019b      	lsls	r3, r3, #6
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	2303      	movs	r3, #3
 8000caa:	4003      	ands	r3, r0
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <__NVIC_SetPriority+0xd8>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	230f      	movs	r3, #15
 8000cba:	4023      	ands	r3, r4
 8000cbc:	3b08      	subs	r3, #8
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	18c3      	adds	r3, r0, r3
 8000cc8:	3304      	adds	r3, #4
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b003      	add	sp, #12
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	045b      	lsls	r3, r3, #17
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d301      	bcc.n	8000cf4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e010      	b.n	8000d16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <SysTick_Config+0x44>)
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	425b      	negs	r3, r3
 8000d00:	2103      	movs	r1, #3
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff ff7c 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x44>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x44>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	210f      	movs	r1, #15
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	1c02      	adds	r2, r0, #0
 8000d34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	0002      	movs	r2, r0
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ff33 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff ffaf 	bl	8000cdc <SysTick_Config>
 8000d7e:	0003      	movs	r3, r0
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e04f      	b.n	8000e3a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2225      	movs	r2, #37	; 0x25
 8000d9e:	5c9b      	ldrb	r3, [r3, r2]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d008      	beq.n	8000db8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2204      	movs	r2, #4
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	2100      	movs	r1, #0
 8000db2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e040      	b.n	8000e3a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	210e      	movs	r1, #14
 8000dc4:	438a      	bics	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd2:	491c      	ldr	r1, [pc, #112]	; (8000e44 <HAL_DMA_Abort+0xbc>)
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2101      	movs	r1, #1
 8000de4:	438a      	bics	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dec:	221c      	movs	r2, #28
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	2101      	movs	r1, #1
 8000df6:	4091      	lsls	r1, r2
 8000df8:	000a      	movs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00c      	beq.n	8000e28 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e18:	490a      	ldr	r1, [pc, #40]	; (8000e44 <HAL_DMA_Abort+0xbc>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2225      	movs	r2, #37	; 0x25
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2224      	movs	r2, #36	; 0x24
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	fffffeff 	.word	0xfffffeff

08000e48 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e50:	210f      	movs	r1, #15
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2225      	movs	r2, #37	; 0x25
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d006      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e048      	b.n	8000f04 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	210e      	movs	r1, #14
 8000e7e:	438a      	bics	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	438a      	bics	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9c:	491d      	ldr	r1, [pc, #116]	; (8000f14 <HAL_DMA_Abort_IT+0xcc>)
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	221c      	movs	r2, #28
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ebe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00c      	beq.n	8000ee2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed2:	4910      	ldr	r1, [pc, #64]	; (8000f14 <HAL_DMA_Abort_IT+0xcc>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ee0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	; 0x25
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2224      	movs	r2, #36	; 0x24
 8000eee:	2100      	movs	r1, #0
 8000ef0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	0010      	movs	r0, r2
 8000f02:	4798      	blx	r3
    }
  }
  return status;
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	781b      	ldrb	r3, [r3, #0]
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b004      	add	sp, #16
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	fffffeff 	.word	0xfffffeff

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e14d      	b.n	80011c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x28>
 8000f3e:	e13e      	b.n	80011be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	58d3      	ldr	r3, [r2, r3]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2207      	movs	r2, #7
 8001014:	4013      	ands	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2107      	movs	r1, #7
 800102e:	400b      	ands	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	6939      	ldr	r1, [r7, #16]
 8001048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_GPIO_Init+0x174>
 800108a:	e098      	b.n	80011be <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3318      	adds	r3, #24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	589b      	ldr	r3, [r3, r2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	220f      	movs	r2, #15
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x1d6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <HAL_GPIO_Init+0x2c8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x1d2>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <HAL_GPIO_Init+0x2cc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x1ce>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x1ca>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a45      	ldr	r2, [pc, #276]	; (80011ec <HAL_GPIO_Init+0x2d4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x1c6>
 80010da:	2304      	movs	r3, #4
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010de:	2305      	movs	r3, #5
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x1d8>
 80010ee:	2300      	movs	r3, #0
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	2103      	movs	r1, #3
 80010f4:	400a      	ands	r2, r1
 80010f6:	00d2      	lsls	r2, r2, #3
 80010f8:	4093      	lsls	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001100:	4936      	ldr	r1, [pc, #216]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3318      	adds	r3, #24
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	035b      	lsls	r3, r3, #13
 8001126:	4013      	ands	r3, r2
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43da      	mvns	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	039b      	lsls	r3, r3, #14
 8001150:	4013      	ands	r3, r2
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001164:	2384      	movs	r3, #132	; 0x84
 8001166:	58d3      	ldr	r3, [r2, r3]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001188:	4914      	ldr	r1, [pc, #80]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 800118a:	2284      	movs	r2, #132	; 0x84
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	58d3      	ldr	r3, [r2, r3]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	025b      	lsls	r3, r3, #9
 80011aa:	4013      	ands	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b6:	4909      	ldr	r1, [pc, #36]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	40da      	lsrs	r2, r3
 80011cc:	1e13      	subs	r3, r2, #0
 80011ce:	d000      	beq.n	80011d2 <HAL_GPIO_Init+0x2ba>
 80011d0:	e6aa      	b.n	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b006      	add	sp, #24
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021800 	.word	0x40021800
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000800 	.word	0x50000800
 80011e8:	50000c00 	.word	0x50000c00
 80011ec:	50001000 	.word	0x50001000

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	0008      	movs	r0, r1
 80011fa:	0011      	movs	r1, r2
 80011fc:	1cbb      	adds	r3, r7, #2
 80011fe:	1c02      	adds	r2, r0, #0
 8001200:	801a      	strh	r2, [r3, #0]
 8001202:	1c7b      	adds	r3, r7, #1
 8001204:	1c0a      	adds	r2, r1, #0
 8001206:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001208:	1c7b      	adds	r3, r7, #1
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001210:	1cbb      	adds	r3, r7, #2
 8001212:	881a      	ldrh	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121a:	1cbb      	adds	r3, r7, #2
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	000a      	movs	r2, r1
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123e:	1cbb      	adds	r3, r7, #2
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	041a      	lsls	r2, r3, #16
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	1cb9      	adds	r1, r7, #2
 800124e:	8809      	ldrh	r1, [r1, #0]
 8001250:	400b      	ands	r3, r1
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800126e:	4013      	ands	r3, r2
 8001270:	0019      	movs	r1, r3
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	429a      	cmp	r2, r3
 8001282:	d11f      	bne.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	0013      	movs	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	189b      	adds	r3, r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4912      	ldr	r1, [pc, #72]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001292:	0018      	movs	r0, r3
 8001294:	f7fe ff36 	bl	8000104 <__udivsi3>
 8001298:	0003      	movs	r3, r0
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129e:	e008      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e001      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e009      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	401a      	ands	r2, r3
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d0ed      	beq.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40007000 	.word	0x40007000
 80012d4:	fffff9ff 	.word	0xfffff9ff
 80012d8:	2000003c 	.word	0x2000003c
 80012dc:	000f4240 	.word	0x000f4240

080012e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	23e0      	movs	r3, #224	; 0xe0
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	4013      	ands	r3, r2
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f000 fb50 	bl	80019ac <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	d100      	bne.n	8001318 <HAL_RCC_OscConfig+0x20>
 8001316:	e07c      	b.n	8001412 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001318:	4bc3      	ldr	r3, [pc, #780]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2238      	movs	r2, #56	; 0x38
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001322:	4bc1      	ldr	r3, [pc, #772]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2203      	movs	r2, #3
 8001328:	4013      	ands	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d102      	bne.n	8001338 <HAL_RCC_OscConfig+0x40>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d002      	beq.n	800133e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d10b      	bne.n	8001356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133e:	4bba      	ldr	r3, [pc, #744]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	029b      	lsls	r3, r3, #10
 8001346:	4013      	ands	r3, r2
 8001348:	d062      	beq.n	8001410 <HAL_RCC_OscConfig+0x118>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d15e      	bne.n	8001410 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e32a      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	429a      	cmp	r2, r3
 8001360:	d107      	bne.n	8001372 <HAL_RCC_OscConfig+0x7a>
 8001362:	4bb1      	ldr	r3, [pc, #708]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4bb0      	ldr	r3, [pc, #704]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0249      	lsls	r1, r1, #9
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e020      	b.n	80013b4 <HAL_RCC_OscConfig+0xbc>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	23a0      	movs	r3, #160	; 0xa0
 8001378:	02db      	lsls	r3, r3, #11
 800137a:	429a      	cmp	r2, r3
 800137c:	d10e      	bne.n	800139c <HAL_RCC_OscConfig+0xa4>
 800137e:	4baa      	ldr	r3, [pc, #680]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4ba9      	ldr	r3, [pc, #676]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	02c9      	lsls	r1, r1, #11
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4ba6      	ldr	r3, [pc, #664]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4ba5      	ldr	r3, [pc, #660]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0249      	lsls	r1, r1, #9
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xbc>
 800139c:	4ba2      	ldr	r3, [pc, #648]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4ba1      	ldr	r3, [pc, #644]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80013a2:	49a2      	ldr	r1, [pc, #648]	; (800162c <HAL_RCC_OscConfig+0x334>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4b9f      	ldr	r3, [pc, #636]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80013ae:	49a0      	ldr	r1, [pc, #640]	; (8001630 <HAL_RCC_OscConfig+0x338>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d014      	beq.n	80013e6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fbd8 	bl	8000b70 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fbd3 	bl	8000b70 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e2e9      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d8:	4b93      	ldr	r3, [pc, #588]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0xce>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fbc3 	bl	8000b70 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fbbe 	bl	8000b70 <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e2d4      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	4b89      	ldr	r3, [pc, #548]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0xf8>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0x126>
 800141c:	e099      	b.n	8001552 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2238      	movs	r2, #56	; 0x38
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001428:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2203      	movs	r2, #3
 800142e:	4013      	ands	r3, r2
 8001430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b10      	cmp	r3, #16
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x146>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d002      	beq.n	8001444 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d135      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b78      	ldr	r3, [pc, #480]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4013      	ands	r3, r2
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x164>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2a7      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b72      	ldr	r3, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a74      	ldr	r2, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x33c>)
 8001462:	4013      	ands	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	021a      	lsls	r2, r3, #8
 800146c:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d112      	bne.n	800149e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001478:	4b6b      	ldr	r3, [pc, #428]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x340>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	4b68      	ldr	r3, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800148c:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0adb      	lsrs	r3, r3, #11
 8001492:	2207      	movs	r2, #7
 8001494:	4013      	ands	r3, r2
 8001496:	4a69      	ldr	r2, [pc, #420]	; (800163c <HAL_RCC_OscConfig+0x344>)
 8001498:	40da      	lsrs	r2, r3
 800149a:	4b69      	ldr	r3, [pc, #420]	; (8001640 <HAL_RCC_OscConfig+0x348>)
 800149c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800149e:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x34c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff fb08 	bl	8000ab8 <HAL_InitTick>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d051      	beq.n	8001550 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e27d      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d030      	beq.n	800151a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014b8:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <HAL_RCC_OscConfig+0x340>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	4b58      	ldr	r3, [pc, #352]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0049      	lsls	r1, r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fb49 	bl	8000b70 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e4:	f7ff fb44 	bl	8000b70 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e25a      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f6:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4013      	ands	r3, r2
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_RCC_OscConfig+0x33c>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	021a      	lsls	r2, r3, #8
 8001512:	4b45      	ldr	r3, [pc, #276]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	e01b      	b.n	8001552 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001520:	4949      	ldr	r1, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x350>)
 8001522:	400a      	ands	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fb23 	bl	8000b70 <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fb1e 	bl	8000b70 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e234      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4013      	ands	r3, r2
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x238>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2208      	movs	r2, #8
 8001558:	4013      	ands	r3, r2
 800155a:	d047      	beq.n	80015ec <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2238      	movs	r2, #56	; 0x38
 8001562:	4013      	ands	r3, r2
 8001564:	2b18      	cmp	r3, #24
 8001566:	d10a      	bne.n	800157e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d03c      	beq.n	80015ec <HAL_RCC_OscConfig+0x2f4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d138      	bne.n	80015ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e216      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800158c:	2101      	movs	r1, #1
 800158e:	430a      	orrs	r2, r1
 8001590:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff faed 	bl	8000b70 <HAL_GetTick>
 8001596:	0003      	movs	r3, r0
 8001598:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fae8 	bl	8000b70 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1fe      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f1      	beq.n	800159c <HAL_RCC_OscConfig+0x2a4>
 80015b8:	e018      	b.n	80015ec <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80015bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	438a      	bics	r2, r1
 80015c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fad3 	bl	8000b70 <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff face 	bl	8000b70 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1e4      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d1f1      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2204      	movs	r2, #4
 80015f2:	4013      	ands	r3, r2
 80015f4:	d100      	bne.n	80015f8 <HAL_RCC_OscConfig+0x300>
 80015f6:	e0c7      	b.n	8001788 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f8:	231f      	movs	r3, #31
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2238      	movs	r2, #56	; 0x38
 8001606:	4013      	ands	r3, r2
 8001608:	2b20      	cmp	r3, #32
 800160a:	d11f      	bne.n	800164c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x330>)
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_RCC_OscConfig+0x320>
 8001616:	e0b7      	b.n	8001788 <HAL_RCC_OscConfig+0x490>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d000      	beq.n	8001622 <HAL_RCC_OscConfig+0x32a>
 8001620:	e0b2      	b.n	8001788 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1c2      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	40021000 	.word	0x40021000
 800162c:	fffeffff 	.word	0xfffeffff
 8001630:	fffbffff 	.word	0xfffbffff
 8001634:	ffff80ff 	.word	0xffff80ff
 8001638:	ffffc7ff 	.word	0xffffc7ff
 800163c:	00f42400 	.word	0x00f42400
 8001640:	2000003c 	.word	0x2000003c
 8001644:	20000040 	.word	0x20000040
 8001648:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800164c:	4bb5      	ldr	r3, [pc, #724]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800164e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	055b      	lsls	r3, r3, #21
 8001654:	4013      	ands	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_RCC_OscConfig+0x364>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x366>
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d011      	beq.n	8001686 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4bb0      	ldr	r3, [pc, #704]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001666:	4baf      	ldr	r3, [pc, #700]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	0549      	lsls	r1, r1, #21
 800166c:	430a      	orrs	r2, r1
 800166e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001670:	4bac      	ldr	r3, [pc, #688]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800167e:	231f      	movs	r3, #31
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001686:	4ba8      	ldr	r3, [pc, #672]	; (8001928 <HAL_RCC_OscConfig+0x630>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4013      	ands	r3, r2
 8001690:	d11a      	bne.n	80016c8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001692:	4ba5      	ldr	r3, [pc, #660]	; (8001928 <HAL_RCC_OscConfig+0x630>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4ba4      	ldr	r3, [pc, #656]	; (8001928 <HAL_RCC_OscConfig+0x630>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	0049      	lsls	r1, r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa66 	bl	8000b70 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff fa61 	bl	8000b70 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e177      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016bc:	4b9a      	ldr	r3, [pc, #616]	; (8001928 <HAL_RCC_OscConfig+0x630>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x3e6>
 80016d0:	4b94      	ldr	r3, [pc, #592]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80016d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d4:	4b93      	ldr	r3, [pc, #588]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x420>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x408>
 80016e6:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80016e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ea:	4b8e      	ldr	r3, [pc, #568]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80016ec:	2104      	movs	r1, #4
 80016ee:	430a      	orrs	r2, r1
 80016f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f2:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80016f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x420>
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001702:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001704:	4b87      	ldr	r3, [pc, #540]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001706:	2101      	movs	r1, #1
 8001708:	438a      	bics	r2, r1
 800170a:	65da      	str	r2, [r3, #92]	; 0x5c
 800170c:	4b85      	ldr	r3, [pc, #532]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800170e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001710:	4b84      	ldr	r3, [pc, #528]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001712:	2104      	movs	r1, #4
 8001714:	438a      	bics	r2, r1
 8001716:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d014      	beq.n	800174a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fa26 	bl	8000b70 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fa21 	bl	8000b70 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a7d      	ldr	r2, [pc, #500]	; (800192c <HAL_RCC_OscConfig+0x634>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e136      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	4b79      	ldr	r3, [pc, #484]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x432>
 8001748:	e013      	b.n	8001772 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fa11 	bl	8000b70 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001752:	e009      	b.n	8001768 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fa0c 	bl	8000b70 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a73      	ldr	r2, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x634>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e121      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001768:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001772:	231f      	movs	r3, #31
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b69      	ldr	r3, [pc, #420]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800177e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001782:	496b      	ldr	r1, [pc, #428]	; (8001930 <HAL_RCC_OscConfig+0x638>)
 8001784:	400a      	ands	r2, r1
 8001786:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2220      	movs	r2, #32
 800178e:	4013      	ands	r3, r2
 8001790:	d039      	beq.n	8001806 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b61      	ldr	r3, [pc, #388]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	03c9      	lsls	r1, r1, #15
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff f9e2 	bl	8000b70 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b2:	f7ff f9dd 	bl	8000b70 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0f3      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017c4:	4b57      	ldr	r3, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x4ba>
 80017d0:	e019      	b.n	8001806 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017d2:	4b54      	ldr	r3, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80017d8:	4956      	ldr	r1, [pc, #344]	; (8001934 <HAL_RCC_OscConfig+0x63c>)
 80017da:	400a      	ands	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff f9c7 	bl	8000b70 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017e8:	f7ff f9c2 	bl	8000b70 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0d8      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d100      	bne.n	8001810 <HAL_RCC_OscConfig+0x518>
 800180e:	e0cc      	b.n	80019aa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2238      	movs	r2, #56	; 0x38
 8001816:	4013      	ands	r3, r2
 8001818:	2b10      	cmp	r3, #16
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x526>
 800181c:	e07b      	b.n	8001916 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d156      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800182c:	4942      	ldr	r1, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x640>)
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f99d 	bl	8000b70 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f998 	bl	8000b70 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0ae      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a37      	ldr	r2, [pc, #220]	; (800193c <HAL_RCC_OscConfig+0x644>)
 8001860:	4013      	ands	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	431a      	orrs	r2, r3
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800188a:	430a      	orrs	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0449      	lsls	r1, r1, #17
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	0549      	lsls	r1, r1, #21
 80018a6:	430a      	orrs	r2, r1
 80018a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff f961 	bl	8000b70 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f95c 	bl	8000b70 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e072      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	049b      	lsls	r3, r3, #18
 80018ce:	4013      	ands	r3, r2
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x5bc>
 80018d2:	e06a      	b.n	80019aa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80018da:	4917      	ldr	r1, [pc, #92]	; (8001938 <HAL_RCC_OscConfig+0x640>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f946 	bl	8000b70 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f941 	bl	8000b70 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e057      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	049b      	lsls	r3, r3, #18
 8001904:	4013      	ands	r3, r2
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_OscConfig+0x62c>)
 800190e:	490c      	ldr	r1, [pc, #48]	; (8001940 <HAL_RCC_OscConfig+0x648>)
 8001910:	400a      	ands	r2, r1
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	e049      	b.n	80019aa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d112      	bne.n	8001944 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e044      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	00001388 	.word	0x00001388
 8001930:	efffffff 	.word	0xefffffff
 8001934:	ffbfffff 	.word	0xffbfffff
 8001938:	feffffff 	.word	0xfeffffff
 800193c:	11c1808c 	.word	0x11c1808c
 8001940:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x6bc>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2203      	movs	r2, #3
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	429a      	cmp	r2, r3
 8001956:	d126      	bne.n	80019a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2270      	movs	r2, #112	; 0x70
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11f      	bne.n	80019a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	23fe      	movs	r3, #254	; 0xfe
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d116      	bne.n	80019a6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	23f8      	movs	r3, #248	; 0xf8
 800197c:	039b      	lsls	r3, r3, #14
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d10e      	bne.n	80019a6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	23e0      	movs	r3, #224	; 0xe0
 800198c:	051b      	lsls	r3, r3, #20
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	0f5b      	lsrs	r3, r3, #29
 800199c:	075a      	lsls	r2, r3, #29
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b008      	add	sp, #32
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0e9      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2207      	movs	r2, #7
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d91e      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2207      	movs	r2, #7
 80019e0:	4393      	bics	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f8c0 	bl	8000b70 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f4:	e009      	b.n	8001a0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f6:	f7ff f8bb 	bl	8000b70 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0ca      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2207      	movs	r2, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d015      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d006      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a2c:	4b60      	ldr	r3, [pc, #384]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	21e0      	movs	r1, #224	; 0xe0
 8001a34:	01c9      	lsls	r1, r1, #7
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d057      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	029b      	lsls	r3, r3, #10
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d12b      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e097      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	049b      	lsls	r3, r3, #18
 8001a80:	4013      	ands	r3, r2
 8001a82:	d11f      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e08b      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d113      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e07f      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e074      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e06d      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f84a 	bl	8000b70 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae2:	f7ff f845 	bl	8000b70 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e054      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2238      	movs	r2, #56	; 0x38
 8001afc:	401a      	ands	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1ec      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d21e      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f822 	bl	8000b70 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f81d 	bl	8000b70 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e02c      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_RCC_ClockConfig+0x200>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b72:	f000 f829 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b76:	0001      	movs	r1, r0
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	220f      	movs	r2, #15
 8001b80:	401a      	ands	r2, r3
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_RCC_ClockConfig+0x204>)
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	58d3      	ldr	r3, [r2, r3]
 8001b88:	221f      	movs	r2, #31
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x208>)
 8001b92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x20c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe ff8d 	bl	8000ab8 <HAL_InitTick>
 8001b9e:	0003      	movs	r3, r0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	00001388 	.word	0x00001388
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	fffff0ff 	.word	0xfffff0ff
 8001bb8:	ffff8fff 	.word	0xffff8fff
 8001bbc:	080045d8 	.word	0x080045d8
 8001bc0:	2000003c 	.word	0x2000003c
 8001bc4:	20000040 	.word	0x20000040

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2238      	movs	r2, #56	; 0x38
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bd8:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0adb      	lsrs	r3, r3, #11
 8001bde:	2207      	movs	r2, #7
 8001be0:	4013      	ands	r3, r2
 8001be2:	2201      	movs	r2, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	4835      	ldr	r0, [pc, #212]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bee:	f7fe fa89 	bl	8000104 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e05d      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2238      	movs	r2, #56	; 0x38
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e054      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2238      	movs	r2, #56	; 0x38
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d138      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10d      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	4824      	ldr	r0, [pc, #144]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c38:	f7fe fa64 	bl	8000104 <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	227f      	movs	r2, #127	; 0x7f
 8001c48:	4013      	ands	r3, r2
 8001c4a:	434b      	muls	r3, r1
 8001c4c:	617b      	str	r3, [r7, #20]
        break;
 8001c4e:	e00d      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c54:	f7fe fa56 	bl	8000104 <__udivsi3>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	227f      	movs	r2, #127	; 0x7f
 8001c64:	4013      	ands	r3, r2
 8001c66:	434b      	muls	r3, r1
 8001c68:	617b      	str	r3, [r7, #20]
        break;
 8001c6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0f5b      	lsrs	r3, r3, #29
 8001c72:	2207      	movs	r2, #7
 8001c74:	4013      	ands	r3, r2
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7fe fa41 	bl	8000104 <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e015      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c88:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2238      	movs	r2, #56	; 0x38
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d103      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2238      	movs	r2, #56	; 0x38
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b18      	cmp	r3, #24
 8001ca6:	d103      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ca8:	23fa      	movs	r3, #250	; 0xfa
 8001caa:	01db      	lsls	r3, r3, #7
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	e001      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cb4:	693b      	ldr	r3, [r7, #16]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b006      	add	sp, #24
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	2000003c 	.word	0x2000003c

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	0004      	movs	r4, r0
 8001cea:	f7ff faf9 	bl	80012e0 <LL_RCC_GetAPB1Prescaler>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	0b1a      	lsrs	r2, r3, #12
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	58d3      	ldr	r3, [r2, r3]
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	40dc      	lsrs	r4, r3
 8001cfe:	0023      	movs	r3, r4
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	08004618 	.word	0x08004618

08001d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d14:	2313      	movs	r3, #19
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	029b      	lsls	r3, r3, #10
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d30:	e0ad      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2011      	movs	r0, #17
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	d110      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	430a      	orrs	r2, r1
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d54:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0049      	lsls	r1, r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d76:	f7fe fefb 	bl	8000b70 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe fef6 	bl	8000b70 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d904      	bls.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d8e:	2313      	movs	r3, #19
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2203      	movs	r2, #3
 8001d94:	701a      	strb	r2, [r3, #0]
        break;
 8001d96:	e005      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0ed      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001da4:	2313      	movs	r3, #19
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d15e      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d014      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0249      	lsls	r1, r1, #9
 8001dde:	430a      	orrs	r2, r1
 8001de0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001de8:	491e      	ldr	r1, [pc, #120]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d016      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe feb8 	bl	8000b70 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e04:	e00c      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe feb3 	bl	8000b70 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a15      	ldr	r2, [pc, #84]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d904      	bls.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e16:	2313      	movs	r3, #19
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	701a      	strb	r2, [r3, #0]
            break;
 8001e1e:	e004      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2202      	movs	r2, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	d0ed      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e2a:	2313      	movs	r3, #19
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e48:	e016      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e4a:	2312      	movs	r3, #18
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2213      	movs	r2, #19
 8001e50:	18ba      	adds	r2, r7, r2
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e00f      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	fffffcff 	.word	0xfffffcff
 8001e64:	fffeffff 	.word	0xfffeffff
 8001e68:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2213      	movs	r2, #19
 8001e72:	18ba      	adds	r2, r7, r2
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e78:	2311      	movs	r3, #17
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4bb6      	ldr	r3, [pc, #728]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e86:	4bb5      	ldr	r3, [pc, #724]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e88:	49b5      	ldr	r1, [pc, #724]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e98:	4bb0      	ldr	r3, [pc, #704]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4bad      	ldr	r3, [pc, #692]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb6:	4ba9      	ldr	r3, [pc, #676]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4ba5      	ldr	r3, [pc, #660]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed4:	4ba1      	ldr	r3, [pc, #644]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	2230      	movs	r2, #48	; 0x30
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b9e      	ldr	r3, [pc, #632]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2210      	movs	r2, #16
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ef2:	4b9a      	ldr	r3, [pc, #616]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	4a9b      	ldr	r2, [pc, #620]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	4b96      	ldr	r3, [pc, #600]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	015b      	lsls	r3, r3, #5
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001f12:	4b92      	ldr	r3, [pc, #584]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	4a94      	ldr	r2, [pc, #592]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	4b8e      	ldr	r3, [pc, #568]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f32:	4b8a      	ldr	r3, [pc, #552]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	4a8d      	ldr	r2, [pc, #564]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f40:	4b86      	ldr	r3, [pc, #536]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f52:	4b82      	ldr	r3, [pc, #520]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	4a86      	ldr	r2, [pc, #536]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f70:	4b7a      	ldr	r3, [pc, #488]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	4a7f      	ldr	r2, [pc, #508]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	4b77      	ldr	r3, [pc, #476]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	4a79      	ldr	r2, [pc, #484]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	01db      	lsls	r3, r3, #7
 8001faa:	4013      	ands	r3, r2
 8001fac:	d015      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fae:	4b6b      	ldr	r3, [pc, #428]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	0899      	lsrs	r1, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fba:	4b68      	ldr	r3, [pc, #416]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	05db      	lsls	r3, r3, #23
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fcc:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0249      	lsls	r1, r1, #9
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	039b      	lsls	r3, r3, #14
 8002002:	4013      	ands	r3, r2
 8002004:	d016      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002006:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	4a5c      	ldr	r2, [pc, #368]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002016:	430a      	orrs	r2, r1
 8002018:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	03db      	lsls	r3, r3, #15
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002026:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0449      	lsls	r1, r1, #17
 8002030:	430a      	orrs	r2, r1
 8002032:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	03db      	lsls	r3, r3, #15
 800203c:	4013      	ands	r3, r2
 800203e:	d016      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002050:	430a      	orrs	r2, r1
 8002052:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	045b      	lsls	r3, r3, #17
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0449      	lsls	r1, r1, #17
 800206a:	430a      	orrs	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d014      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	2203      	movs	r2, #3
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800208a:	430a      	orrs	r2, r1
 800208c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d106      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	019b      	lsls	r3, r3, #6
 80020ac:	4013      	ands	r3, r2
 80020ae:	d014      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	220c      	movs	r2, #12
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d106      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	430a      	orrs	r2, r1
 80020d8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	045b      	lsls	r3, r3, #17
 80020e2:	4013      	ands	r3, r2
 80020e4:	d016      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4a22      	ldr	r2, [pc, #136]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	429a      	cmp	r2, r3
 8002104:	d106      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0449      	lsls	r1, r1, #17
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	049b      	lsls	r3, r3, #18
 800211c:	4013      	ands	r3, r2
 800211e:	d016      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002130:	430a      	orrs	r2, r1
 8002132:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	429a      	cmp	r2, r3
 800213e:	d106      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0449      	lsls	r1, r1, #17
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800214e:	2312      	movs	r3, #18
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	781b      	ldrb	r3, [r3, #0]
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b006      	add	sp, #24
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	efffffff 	.word	0xefffffff
 8002164:	fffff3ff 	.word	0xfffff3ff
 8002168:	fffffcff 	.word	0xfffffcff
 800216c:	fff3ffff 	.word	0xfff3ffff
 8002170:	ffcfffff 	.word	0xffcfffff
 8002174:	ffffcfff 	.word	0xffffcfff
 8002178:	ffff3fff 	.word	0xffff3fff
 800217c:	ffbfffff 	.word	0xffbfffff
 8002180:	feffffff 	.word	0xfeffffff

08002184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e046      	b.n	8002224 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2288      	movs	r2, #136	; 0x88
 800219a:	589b      	ldr	r3, [r3, r2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2284      	movs	r2, #132	; 0x84
 80021a4:	2100      	movs	r1, #0
 80021a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fe fba8 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2288      	movs	r2, #136	; 0x88
 80021b4:	2124      	movs	r1, #36	; 0x24
 80021b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	438a      	bics	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 ffce 	bl	8003174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fc74 	bl	8002ac8 <UART_SetConfig>
 80021e0:	0003      	movs	r3, r0
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e01c      	b.n	8002224 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	490d      	ldr	r1, [pc, #52]	; (800222c <HAL_UART_Init+0xa8>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	212a      	movs	r1, #42	; 0x2a
 8002206:	438a      	bics	r2, r1
 8002208:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f001 f85d 	bl	80032dc <UART_CheckIdleState>
 8002222:	0003      	movs	r3, r0
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}
 800222c:	ffffb7ff 	.word	0xffffb7ff

08002230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2288      	movs	r2, #136	; 0x88
 8002244:	589b      	ldr	r3, [r3, r2]
 8002246:	2b20      	cmp	r3, #32
 8002248:	d000      	beq.n	800224c <HAL_UART_Transmit+0x1c>
 800224a:	e090      	b.n	800236e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_UART_Transmit+0x2a>
 8002252:	1dbb      	adds	r3, r7, #6
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e088      	b.n	8002370 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	015b      	lsls	r3, r3, #5
 8002266:	429a      	cmp	r2, r3
 8002268:	d109      	bne.n	800227e <HAL_UART_Transmit+0x4e>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2201      	movs	r2, #1
 8002276:	4013      	ands	r3, r2
 8002278:	d001      	beq.n	800227e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e078      	b.n	8002370 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2290      	movs	r2, #144	; 0x90
 8002282:	2100      	movs	r1, #0
 8002284:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2288      	movs	r2, #136	; 0x88
 800228a:	2121      	movs	r1, #33	; 0x21
 800228c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800228e:	f7fe fc6f 	bl	8000b70 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1dba      	adds	r2, r7, #6
 800229a:	2154      	movs	r1, #84	; 0x54
 800229c:	8812      	ldrh	r2, [r2, #0]
 800229e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1dba      	adds	r2, r7, #6
 80022a4:	2156      	movs	r1, #86	; 0x56
 80022a6:	8812      	ldrh	r2, [r2, #0]
 80022a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	015b      	lsls	r3, r3, #5
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d108      	bne.n	80022c8 <HAL_UART_Transmit+0x98>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	e003      	b.n	80022d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022d0:	e030      	b.n	8002334 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	0013      	movs	r3, r2
 80022dc:	2200      	movs	r2, #0
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	f001 f8a6 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2288      	movs	r2, #136	; 0x88
 80022ec:	2120      	movs	r1, #32
 80022ee:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	001a      	movs	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	05d2      	lsls	r2, r2, #23
 8002306:	0dd2      	lsrs	r2, r2, #23
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	3302      	adds	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e007      	b.n	8002322 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2256      	movs	r2, #86	; 0x56
 8002326:	5a9b      	ldrh	r3, [r3, r2]
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b299      	uxth	r1, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2256      	movs	r2, #86	; 0x56
 8002332:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2256      	movs	r2, #86	; 0x56
 8002338:	5a9b      	ldrh	r3, [r3, r2]
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1c8      	bne.n	80022d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	0013      	movs	r3, r2
 800234a:	2200      	movs	r2, #0
 800234c:	2140      	movs	r1, #64	; 0x40
 800234e:	f001 f86f 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d005      	beq.n	8002362 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2288      	movs	r2, #136	; 0x88
 800235a:	2120      	movs	r1, #32
 800235c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e006      	b.n	8002370 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2288      	movs	r2, #136	; 0x88
 8002366:	2120      	movs	r1, #32
 8002368:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b008      	add	sp, #32
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	1dbb      	adds	r3, r7, #6
 8002384:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	228c      	movs	r2, #140	; 0x8c
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	2b20      	cmp	r3, #32
 800238e:	d14f      	bne.n	8002430 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_UART_Receive_IT+0x26>
 8002396:	1dbb      	adds	r3, r7, #6
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e047      	b.n	8002432 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	015b      	lsls	r3, r3, #5
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d109      	bne.n	80023c2 <HAL_UART_Receive_IT+0x4a>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2201      	movs	r2, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e037      	b.n	8002432 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <HAL_UART_Receive_IT+0xc4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_UART_Receive_IT+0xa6>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_UART_Receive_IT+0xc8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d020      	beq.n	800241e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	4013      	ands	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ea:	f3ef 8310 	mrs	r3, PRIMASK
 80023ee:	613b      	str	r3, [r7, #16]
  return(result);
 80023f0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	2301      	movs	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f383 8810 	msr	PRIMASK, r3
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	04c9      	lsls	r1, r1, #19
 800240e:	430a      	orrs	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f383 8810 	msr	PRIMASK, r3
}
 800241c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	0018      	movs	r0, r3
 8002428:	f001 f872 	bl	8003510 <UART_Start_Receive_IT>
 800242c:	0003      	movs	r3, r0
 800242e:	e000      	b.n	8002432 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b008      	add	sp, #32
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	40008000 	.word	0x40008000
 8002440:	40008400 	.word	0x40008400

08002444 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b0aa      	sub	sp, #168	; 0xa8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	22a4      	movs	r2, #164	; 0xa4
 8002454:	18b9      	adds	r1, r7, r2
 8002456:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	20a0      	movs	r0, #160	; 0xa0
 8002460:	1839      	adds	r1, r7, r0
 8002462:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	249c      	movs	r4, #156	; 0x9c
 800246c:	1939      	adds	r1, r7, r4
 800246e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002470:	0011      	movs	r1, r2
 8002472:	18bb      	adds	r3, r7, r2
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4aa2      	ldr	r2, [pc, #648]	; (8002700 <HAL_UART_IRQHandler+0x2bc>)
 8002478:	4013      	ands	r3, r2
 800247a:	2298      	movs	r2, #152	; 0x98
 800247c:	18bd      	adds	r5, r7, r2
 800247e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002480:	18bb      	adds	r3, r7, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11a      	bne.n	80024be <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002488:	187b      	adds	r3, r7, r1
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2220      	movs	r2, #32
 800248e:	4013      	ands	r3, r2
 8002490:	d015      	beq.n	80024be <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002492:	183b      	adds	r3, r7, r0
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2220      	movs	r2, #32
 8002498:	4013      	ands	r3, r2
 800249a:	d105      	bne.n	80024a8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800249c:	193b      	adds	r3, r7, r4
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	055b      	lsls	r3, r3, #21
 80024a4:	4013      	ands	r3, r2
 80024a6:	d00a      	beq.n	80024be <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d100      	bne.n	80024b2 <HAL_UART_IRQHandler+0x6e>
 80024b0:	e2dc      	b.n	8002a6c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	0010      	movs	r0, r2
 80024ba:	4798      	blx	r3
      }
      return;
 80024bc:	e2d6      	b.n	8002a6c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024be:	2398      	movs	r3, #152	; 0x98
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d100      	bne.n	80024ca <HAL_UART_IRQHandler+0x86>
 80024c8:	e122      	b.n	8002710 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80024ca:	239c      	movs	r3, #156	; 0x9c
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8c      	ldr	r2, [pc, #560]	; (8002704 <HAL_UART_IRQHandler+0x2c0>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	d106      	bne.n	80024e4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024d6:	23a0      	movs	r3, #160	; 0xa0
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a8a      	ldr	r2, [pc, #552]	; (8002708 <HAL_UART_IRQHandler+0x2c4>)
 80024de:	4013      	ands	r3, r2
 80024e0:	d100      	bne.n	80024e4 <HAL_UART_IRQHandler+0xa0>
 80024e2:	e115      	b.n	8002710 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024e4:	23a4      	movs	r3, #164	; 0xa4
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	d012      	beq.n	8002516 <HAL_UART_IRQHandler+0xd2>
 80024f0:	23a0      	movs	r3, #160	; 0xa0
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	d00b      	beq.n	8002516 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2290      	movs	r2, #144	; 0x90
 800250a:	589b      	ldr	r3, [r3, r2]
 800250c:	2201      	movs	r2, #1
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2190      	movs	r1, #144	; 0x90
 8002514:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002516:	23a4      	movs	r3, #164	; 0xa4
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d011      	beq.n	8002546 <HAL_UART_IRQHandler+0x102>
 8002522:	239c      	movs	r3, #156	; 0x9c
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	4013      	ands	r3, r2
 800252c:	d00b      	beq.n	8002546 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2202      	movs	r2, #2
 8002534:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2290      	movs	r2, #144	; 0x90
 800253a:	589b      	ldr	r3, [r3, r2]
 800253c:	2204      	movs	r2, #4
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2190      	movs	r1, #144	; 0x90
 8002544:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002546:	23a4      	movs	r3, #164	; 0xa4
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	4013      	ands	r3, r2
 8002550:	d011      	beq.n	8002576 <HAL_UART_IRQHandler+0x132>
 8002552:	239c      	movs	r3, #156	; 0x9c
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	d00b      	beq.n	8002576 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2204      	movs	r2, #4
 8002564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2290      	movs	r2, #144	; 0x90
 800256a:	589b      	ldr	r3, [r3, r2]
 800256c:	2202      	movs	r2, #2
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2190      	movs	r1, #144	; 0x90
 8002574:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002576:	23a4      	movs	r3, #164	; 0xa4
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2208      	movs	r2, #8
 800257e:	4013      	ands	r3, r2
 8002580:	d017      	beq.n	80025b2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002582:	23a0      	movs	r3, #160	; 0xa0
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2220      	movs	r2, #32
 800258a:	4013      	ands	r3, r2
 800258c:	d105      	bne.n	800259a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800258e:	239c      	movs	r3, #156	; 0x9c
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5b      	ldr	r2, [pc, #364]	; (8002704 <HAL_UART_IRQHandler+0x2c0>)
 8002596:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002598:	d00b      	beq.n	80025b2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2208      	movs	r2, #8
 80025a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2290      	movs	r2, #144	; 0x90
 80025a6:	589b      	ldr	r3, [r3, r2]
 80025a8:	2208      	movs	r2, #8
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2190      	movs	r1, #144	; 0x90
 80025b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025b2:	23a4      	movs	r3, #164	; 0xa4
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_UART_IRQHandler+0x1a4>
 80025c0:	23a0      	movs	r3, #160	; 0xa0
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	04db      	lsls	r3, r3, #19
 80025ca:	4013      	ands	r3, r2
 80025cc:	d00c      	beq.n	80025e8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2290      	movs	r2, #144	; 0x90
 80025dc:	589b      	ldr	r3, [r3, r2]
 80025de:	2220      	movs	r2, #32
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2190      	movs	r1, #144	; 0x90
 80025e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2290      	movs	r2, #144	; 0x90
 80025ec:	589b      	ldr	r3, [r3, r2]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d100      	bne.n	80025f4 <HAL_UART_IRQHandler+0x1b0>
 80025f2:	e23d      	b.n	8002a70 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025f4:	23a4      	movs	r3, #164	; 0xa4
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2220      	movs	r2, #32
 80025fc:	4013      	ands	r3, r2
 80025fe:	d015      	beq.n	800262c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002600:	23a0      	movs	r3, #160	; 0xa0
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2220      	movs	r2, #32
 8002608:	4013      	ands	r3, r2
 800260a:	d106      	bne.n	800261a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800260c:	239c      	movs	r3, #156	; 0x9c
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	055b      	lsls	r3, r3, #21
 8002616:	4013      	ands	r3, r2
 8002618:	d008      	beq.n	800262c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	0010      	movs	r0, r2
 800262a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2290      	movs	r2, #144	; 0x90
 8002630:	589b      	ldr	r3, [r3, r2]
 8002632:	2194      	movs	r1, #148	; 0x94
 8002634:	187a      	adds	r2, r7, r1
 8002636:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	4013      	ands	r3, r2
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d004      	beq.n	8002650 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002646:	187b      	adds	r3, r7, r1
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2228      	movs	r2, #40	; 0x28
 800264c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800264e:	d04c      	beq.n	80026ea <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	0018      	movs	r0, r3
 8002654:	f001 f880 	bl	8003758 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	4013      	ands	r3, r2
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d13c      	bne.n	80026e0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800266c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266e:	2090      	movs	r0, #144	; 0x90
 8002670:	183a      	adds	r2, r7, r0
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	438a      	bics	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	183b      	adds	r3, r7, r0
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002698:	f383 8810 	msr	PRIMASK, r3
}
 800269c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	589b      	ldr	r3, [r3, r2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	589b      	ldr	r3, [r3, r2]
 80026ae:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_UART_IRQHandler+0x2c8>)
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	589b      	ldr	r3, [r3, r2]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7fe fbc5 	bl	8000e48 <HAL_DMA_Abort_IT>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d01c      	beq.n	80026fc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	589b      	ldr	r3, [r3, r2]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	5852      	ldr	r2, [r2, r1]
 80026d0:	0010      	movs	r0, r2
 80026d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e012      	b.n	80026fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f9e1 	bl	8002aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026de:	e00d      	b.n	80026fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 f9dc 	bl	8002aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e008      	b.n	80026fc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 f9d7 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2290      	movs	r2, #144	; 0x90
 80026f6:	2100      	movs	r1, #0
 80026f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026fa:	e1b9      	b.n	8002a70 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fc:	46c0      	nop			; (mov r8, r8)
    return;
 80026fe:	e1b7      	b.n	8002a70 <HAL_UART_IRQHandler+0x62c>
 8002700:	0000080f 	.word	0x0000080f
 8002704:	10000001 	.word	0x10000001
 8002708:	04000120 	.word	0x04000120
 800270c:	08003825 	.word	0x08003825

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d000      	beq.n	800271a <HAL_UART_IRQHandler+0x2d6>
 8002718:	e13e      	b.n	8002998 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800271a:	23a4      	movs	r3, #164	; 0xa4
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	d100      	bne.n	8002728 <HAL_UART_IRQHandler+0x2e4>
 8002726:	e137      	b.n	8002998 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002728:	23a0      	movs	r3, #160	; 0xa0
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2210      	movs	r2, #16
 8002730:	4013      	ands	r3, r2
 8002732:	d100      	bne.n	8002736 <HAL_UART_IRQHandler+0x2f2>
 8002734:	e130      	b.n	8002998 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2210      	movs	r2, #16
 800273c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	4013      	ands	r3, r2
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d000      	beq.n	800274e <HAL_UART_IRQHandler+0x30a>
 800274c:	e0a4      	b.n	8002898 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	589b      	ldr	r3, [r3, r2]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	217e      	movs	r1, #126	; 0x7e
 800275a:	187b      	adds	r3, r7, r1
 800275c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800275e:	187b      	adds	r3, r7, r1
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d100      	bne.n	8002768 <HAL_UART_IRQHandler+0x324>
 8002766:	e185      	b.n	8002a74 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	225c      	movs	r2, #92	; 0x5c
 800276c:	5a9b      	ldrh	r3, [r3, r2]
 800276e:	187a      	adds	r2, r7, r1
 8002770:	8812      	ldrh	r2, [r2, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d300      	bcc.n	8002778 <HAL_UART_IRQHandler+0x334>
 8002776:	e17d      	b.n	8002a74 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	187a      	adds	r2, r7, r1
 800277c:	215e      	movs	r1, #94	; 0x5e
 800277e:	8812      	ldrh	r2, [r2, #0]
 8002780:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	589b      	ldr	r3, [r3, r2]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2220      	movs	r2, #32
 800278e:	4013      	ands	r3, r2
 8002790:	d170      	bne.n	8002874 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002792:	f3ef 8310 	mrs	r3, PRIMASK
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279a:	67bb      	str	r3, [r7, #120]	; 0x78
 800279c:	2301      	movs	r3, #1
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	f383 8810 	msr	PRIMASK, r3
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	49b4      	ldr	r1, [pc, #720]	; (8002a84 <HAL_UART_IRQHandler+0x640>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	f383 8810 	msr	PRIMASK, r3
}
 80027c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c4:	f3ef 8310 	mrs	r3, PRIMASK
 80027c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027cc:	677b      	str	r3, [r7, #116]	; 0x74
 80027ce:	2301      	movs	r3, #1
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d4:	f383 8810 	msr	PRIMASK, r3
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	438a      	bics	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f0:	f383 8810 	msr	PRIMASK, r3
}
 80027f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f6:	f3ef 8310 	mrs	r3, PRIMASK
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fe:	673b      	str	r3, [r7, #112]	; 0x70
 8002800:	2301      	movs	r3, #1
 8002802:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002806:	f383 8810 	msr	PRIMASK, r3
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	438a      	bics	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800281e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	228c      	movs	r2, #140	; 0x8c
 800282c:	2120      	movs	r1, #32
 800282e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002836:	f3ef 8310 	mrs	r3, PRIMASK
 800283a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800283c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002840:	2301      	movs	r3, #1
 8002842:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	f383 8810 	msr	PRIMASK, r3
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2110      	movs	r1, #16
 8002858:	438a      	bics	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	589b      	ldr	r3, [r3, r2]
 800286e:	0018      	movs	r0, r3
 8002870:	f7fe fa8a 	bl	8000d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	225c      	movs	r2, #92	; 0x5c
 800287e:	5a9a      	ldrh	r2, [r3, r2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	215e      	movs	r1, #94	; 0x5e
 8002884:	5a5b      	ldrh	r3, [r3, r1]
 8002886:	b29b      	uxth	r3, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f000 f90d 	bl	8002ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002896:	e0ed      	b.n	8002a74 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	225c      	movs	r2, #92	; 0x5c
 800289c:	5a99      	ldrh	r1, [r3, r2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	225e      	movs	r2, #94	; 0x5e
 80028a2:	5a9b      	ldrh	r3, [r3, r2]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	208e      	movs	r0, #142	; 0x8e
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	1a8a      	subs	r2, r1, r2
 80028ac:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	225e      	movs	r2, #94	; 0x5e
 80028b2:	5a9b      	ldrh	r3, [r3, r2]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d100      	bne.n	80028bc <HAL_UART_IRQHandler+0x478>
 80028ba:	e0dd      	b.n	8002a78 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80028bc:	183b      	adds	r3, r7, r0
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d100      	bne.n	80028c6 <HAL_UART_IRQHandler+0x482>
 80028c4:	e0d8      	b.n	8002a78 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80028cc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028ce:	2488      	movs	r4, #136	; 0x88
 80028d0:	193a      	adds	r2, r7, r4
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f383 8810 	msr	PRIMASK, r3
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4967      	ldr	r1, [pc, #412]	; (8002a88 <HAL_UART_IRQHandler+0x644>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f383 8810 	msr	PRIMASK, r3
}
 80028fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002902:	61bb      	str	r3, [r7, #24]
  return(result);
 8002904:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002906:	2484      	movs	r4, #132	; 0x84
 8002908:	193a      	adds	r2, r7, r4
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	495a      	ldr	r1, [pc, #360]	; (8002a8c <HAL_UART_IRQHandler+0x648>)
 8002924:	400a      	ands	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	193b      	adds	r3, r7, r4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f383 8810 	msr	PRIMASK, r3
}
 8002934:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	228c      	movs	r2, #140	; 0x8c
 800293a:	2120      	movs	r1, #32
 800293c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800294a:	f3ef 8310 	mrs	r3, PRIMASK
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002952:	2480      	movs	r4, #128	; 0x80
 8002954:	193a      	adds	r2, r7, r4
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	f383 8810 	msr	PRIMASK, r3
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2110      	movs	r1, #16
 8002970:	438a      	bics	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	193b      	adds	r3, r7, r4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	f383 8810 	msr	PRIMASK, r3
}
 8002980:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002988:	183b      	adds	r3, r7, r0
 800298a:	881a      	ldrh	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f000 f88d 	bl	8002ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002996:	e06f      	b.n	8002a78 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002998:	23a4      	movs	r3, #164	; 0xa4
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	035b      	lsls	r3, r3, #13
 80029a2:	4013      	ands	r3, r2
 80029a4:	d010      	beq.n	80029c8 <HAL_UART_IRQHandler+0x584>
 80029a6:	239c      	movs	r3, #156	; 0x9c
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	03db      	lsls	r3, r3, #15
 80029b0:	4013      	ands	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0352      	lsls	r2, r2, #13
 80029bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f001 fc9f 	bl	8004304 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029c6:	e05a      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80029c8:	23a4      	movs	r3, #164	; 0xa4
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	4013      	ands	r3, r2
 80029d2:	d016      	beq.n	8002a02 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029d4:	23a0      	movs	r3, #160	; 0xa0
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	4013      	ands	r3, r2
 80029de:	d106      	bne.n	80029ee <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029e0:	239c      	movs	r3, #156	; 0x9c
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d042      	beq.n	8002a7c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	0010      	movs	r0, r2
 80029fe:	4798      	blx	r3
    }
    return;
 8002a00:	e03c      	b.n	8002a7c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a02:	23a4      	movs	r3, #164	; 0xa4
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00a      	beq.n	8002a24 <HAL_UART_IRQHandler+0x5e0>
 8002a0e:	23a0      	movs	r3, #160	; 0xa0
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	4013      	ands	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 ff18 	bl	8003852 <UART_EndTransmit_IT>
    return;
 8002a22:	e02c      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a24:	23a4      	movs	r3, #164	; 0xa4
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <HAL_UART_IRQHandler+0x606>
 8002a32:	23a0      	movs	r3, #160	; 0xa0
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	05db      	lsls	r3, r3, #23
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f001 fc6e 	bl	8004324 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a48:	e019      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a4a:	23a4      	movs	r3, #164	; 0xa4
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	045b      	lsls	r3, r3, #17
 8002a54:	4013      	ands	r3, r2
 8002a56:	d012      	beq.n	8002a7e <HAL_UART_IRQHandler+0x63a>
 8002a58:	23a0      	movs	r3, #160	; 0xa0
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da0d      	bge.n	8002a7e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f001 fc55 	bl	8004314 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a6a:	e008      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	e006      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
    return;
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	e004      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	e002      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_IRQHandler+0x63a>
    return;
 8002a7c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b02a      	add	sp, #168	; 0xa8
 8002a82:	bdb0      	pop	{r4, r5, r7, pc}
 8002a84:	fffffeff 	.word	0xfffffeff
 8002a88:	fffffedf 	.word	0xfffffedf
 8002a8c:	effffffe 	.word	0xeffffffe

08002a90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	000a      	movs	r2, r1
 8002aba:	1cbb      	adds	r3, r7, #2
 8002abc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b090      	sub	sp, #64	; 0x40
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad0:	231a      	movs	r3, #26
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	189b      	adds	r3, r3, r2
 8002ad6:	19db      	adds	r3, r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4ac1      	ldr	r2, [pc, #772]	; (8002e00 <UART_SetConfig+0x338>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	0019      	movs	r1, r3
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4abc      	ldr	r2, [pc, #752]	; (8002e04 <UART_SetConfig+0x33c>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	0003      	movs	r3, r0
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4ab6      	ldr	r2, [pc, #728]	; (8002e08 <UART_SetConfig+0x340>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <UART_SetConfig+0x80>
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4ab4      	ldr	r2, [pc, #720]	; (8002e0c <UART_SetConfig+0x344>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b44:	4313      	orrs	r3, r2
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4ab0      	ldr	r2, [pc, #704]	; (8002e10 <UART_SetConfig+0x348>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	220f      	movs	r2, #15
 8002b66:	4393      	bics	r3, r2
 8002b68:	0018      	movs	r0, r3
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	0003      	movs	r3, r0
 8002b74:	430b      	orrs	r3, r1
 8002b76:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4aa5      	ldr	r2, [pc, #660]	; (8002e14 <UART_SetConfig+0x34c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d131      	bne.n	8002be6 <UART_SetConfig+0x11e>
 8002b82:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <UART_SetConfig+0x350>)
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	2203      	movs	r2, #3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d01d      	beq.n	8002bca <UART_SetConfig+0x102>
 8002b8e:	d823      	bhi.n	8002bd8 <UART_SetConfig+0x110>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d00c      	beq.n	8002bae <UART_SetConfig+0xe6>
 8002b94:	d820      	bhi.n	8002bd8 <UART_SetConfig+0x110>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <UART_SetConfig+0xd8>
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d00e      	beq.n	8002bbc <UART_SetConfig+0xf4>
 8002b9e:	e01b      	b.n	8002bd8 <UART_SetConfig+0x110>
 8002ba0:	231b      	movs	r3, #27
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	19db      	adds	r3, r3, r7
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e154      	b.n	8002e58 <UART_SetConfig+0x390>
 8002bae:	231b      	movs	r3, #27
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	19db      	adds	r3, r3, r7
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e14d      	b.n	8002e58 <UART_SetConfig+0x390>
 8002bbc:	231b      	movs	r3, #27
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19db      	adds	r3, r3, r7
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e146      	b.n	8002e58 <UART_SetConfig+0x390>
 8002bca:	231b      	movs	r3, #27
 8002bcc:	2220      	movs	r2, #32
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	19db      	adds	r3, r3, r7
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e13f      	b.n	8002e58 <UART_SetConfig+0x390>
 8002bd8:	231b      	movs	r3, #27
 8002bda:	2220      	movs	r2, #32
 8002bdc:	189b      	adds	r3, r3, r2
 8002bde:	19db      	adds	r3, r3, r7
 8002be0:	2210      	movs	r2, #16
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e138      	b.n	8002e58 <UART_SetConfig+0x390>
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a8c      	ldr	r2, [pc, #560]	; (8002e1c <UART_SetConfig+0x354>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d131      	bne.n	8002c54 <UART_SetConfig+0x18c>
 8002bf0:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <UART_SetConfig+0x350>)
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	220c      	movs	r2, #12
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d01d      	beq.n	8002c38 <UART_SetConfig+0x170>
 8002bfc:	d823      	bhi.n	8002c46 <UART_SetConfig+0x17e>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d00c      	beq.n	8002c1c <UART_SetConfig+0x154>
 8002c02:	d820      	bhi.n	8002c46 <UART_SetConfig+0x17e>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <UART_SetConfig+0x146>
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d00e      	beq.n	8002c2a <UART_SetConfig+0x162>
 8002c0c:	e01b      	b.n	8002c46 <UART_SetConfig+0x17e>
 8002c0e:	231b      	movs	r3, #27
 8002c10:	2220      	movs	r2, #32
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	19db      	adds	r3, r3, r7
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e11d      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c1c:	231b      	movs	r3, #27
 8002c1e:	2220      	movs	r2, #32
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	19db      	adds	r3, r3, r7
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e116      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c2a:	231b      	movs	r3, #27
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	189b      	adds	r3, r3, r2
 8002c30:	19db      	adds	r3, r3, r7
 8002c32:	2204      	movs	r2, #4
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e10f      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c38:	231b      	movs	r3, #27
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	19db      	adds	r3, r3, r7
 8002c40:	2208      	movs	r2, #8
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e108      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c46:	231b      	movs	r3, #27
 8002c48:	2220      	movs	r2, #32
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	19db      	adds	r3, r3, r7
 8002c4e:	2210      	movs	r2, #16
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e101      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a71      	ldr	r2, [pc, #452]	; (8002e20 <UART_SetConfig+0x358>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d131      	bne.n	8002cc2 <UART_SetConfig+0x1fa>
 8002c5e:	4b6e      	ldr	r3, [pc, #440]	; (8002e18 <UART_SetConfig+0x350>)
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	2230      	movs	r2, #48	; 0x30
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b30      	cmp	r3, #48	; 0x30
 8002c68:	d01d      	beq.n	8002ca6 <UART_SetConfig+0x1de>
 8002c6a:	d823      	bhi.n	8002cb4 <UART_SetConfig+0x1ec>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d00c      	beq.n	8002c8a <UART_SetConfig+0x1c2>
 8002c70:	d820      	bhi.n	8002cb4 <UART_SetConfig+0x1ec>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <UART_SetConfig+0x1b4>
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d00e      	beq.n	8002c98 <UART_SetConfig+0x1d0>
 8002c7a:	e01b      	b.n	8002cb4 <UART_SetConfig+0x1ec>
 8002c7c:	231b      	movs	r3, #27
 8002c7e:	2220      	movs	r2, #32
 8002c80:	189b      	adds	r3, r3, r2
 8002c82:	19db      	adds	r3, r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e0e6      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c8a:	231b      	movs	r3, #27
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	19db      	adds	r3, r3, r7
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e0df      	b.n	8002e58 <UART_SetConfig+0x390>
 8002c98:	231b      	movs	r3, #27
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	19db      	adds	r3, r3, r7
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e0d8      	b.n	8002e58 <UART_SetConfig+0x390>
 8002ca6:	231b      	movs	r3, #27
 8002ca8:	2220      	movs	r2, #32
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	19db      	adds	r3, r3, r7
 8002cae:	2208      	movs	r2, #8
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e0d1      	b.n	8002e58 <UART_SetConfig+0x390>
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	189b      	adds	r3, r3, r2
 8002cba:	19db      	adds	r3, r3, r7
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e0ca      	b.n	8002e58 <UART_SetConfig+0x390>
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <UART_SetConfig+0x35c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d106      	bne.n	8002cda <UART_SetConfig+0x212>
 8002ccc:	231b      	movs	r3, #27
 8002cce:	2220      	movs	r2, #32
 8002cd0:	189b      	adds	r3, r3, r2
 8002cd2:	19db      	adds	r3, r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e0be      	b.n	8002e58 <UART_SetConfig+0x390>
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <UART_SetConfig+0x360>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d106      	bne.n	8002cf2 <UART_SetConfig+0x22a>
 8002ce4:	231b      	movs	r3, #27
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	189b      	adds	r3, r3, r2
 8002cea:	19db      	adds	r3, r3, r7
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	e0b2      	b.n	8002e58 <UART_SetConfig+0x390>
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a4d      	ldr	r2, [pc, #308]	; (8002e2c <UART_SetConfig+0x364>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d106      	bne.n	8002d0a <UART_SetConfig+0x242>
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2220      	movs	r2, #32
 8002d00:	189b      	adds	r3, r3, r2
 8002d02:	19db      	adds	r3, r3, r7
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e0a6      	b.n	8002e58 <UART_SetConfig+0x390>
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a3e      	ldr	r2, [pc, #248]	; (8002e08 <UART_SetConfig+0x340>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d13e      	bne.n	8002d92 <UART_SetConfig+0x2ca>
 8002d14:	4b40      	ldr	r3, [pc, #256]	; (8002e18 <UART_SetConfig+0x350>)
 8002d16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d18:	23c0      	movs	r3, #192	; 0xc0
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	22c0      	movs	r2, #192	; 0xc0
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d027      	beq.n	8002d76 <UART_SetConfig+0x2ae>
 8002d26:	22c0      	movs	r2, #192	; 0xc0
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d82a      	bhi.n	8002d84 <UART_SetConfig+0x2bc>
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d011      	beq.n	8002d5a <UART_SetConfig+0x292>
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d822      	bhi.n	8002d84 <UART_SetConfig+0x2bc>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <UART_SetConfig+0x284>
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	00d2      	lsls	r2, r2, #3
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00e      	beq.n	8002d68 <UART_SetConfig+0x2a0>
 8002d4a:	e01b      	b.n	8002d84 <UART_SetConfig+0x2bc>
 8002d4c:	231b      	movs	r3, #27
 8002d4e:	2220      	movs	r2, #32
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	19db      	adds	r3, r3, r7
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e07e      	b.n	8002e58 <UART_SetConfig+0x390>
 8002d5a:	231b      	movs	r3, #27
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e077      	b.n	8002e58 <UART_SetConfig+0x390>
 8002d68:	231b      	movs	r3, #27
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	19db      	adds	r3, r3, r7
 8002d70:	2204      	movs	r2, #4
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e070      	b.n	8002e58 <UART_SetConfig+0x390>
 8002d76:	231b      	movs	r3, #27
 8002d78:	2220      	movs	r2, #32
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	19db      	adds	r3, r3, r7
 8002d7e:	2208      	movs	r2, #8
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e069      	b.n	8002e58 <UART_SetConfig+0x390>
 8002d84:	231b      	movs	r3, #27
 8002d86:	2220      	movs	r2, #32
 8002d88:	189b      	adds	r3, r3, r2
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e062      	b.n	8002e58 <UART_SetConfig+0x390>
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <UART_SetConfig+0x344>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d157      	bne.n	8002e4c <UART_SetConfig+0x384>
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <UART_SetConfig+0x350>)
 8002d9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002da0:	23c0      	movs	r3, #192	; 0xc0
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	22c0      	movs	r2, #192	; 0xc0
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d040      	beq.n	8002e30 <UART_SetConfig+0x368>
 8002dae:	22c0      	movs	r2, #192	; 0xc0
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d843      	bhi.n	8002e3e <UART_SetConfig+0x376>
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d011      	beq.n	8002de2 <UART_SetConfig+0x31a>
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d83b      	bhi.n	8002e3e <UART_SetConfig+0x376>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <UART_SetConfig+0x30c>
 8002dca:	2280      	movs	r2, #128	; 0x80
 8002dcc:	0052      	lsls	r2, r2, #1
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <UART_SetConfig+0x328>
 8002dd2:	e034      	b.n	8002e3e <UART_SetConfig+0x376>
 8002dd4:	231b      	movs	r3, #27
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	189b      	adds	r3, r3, r2
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e03a      	b.n	8002e58 <UART_SetConfig+0x390>
 8002de2:	231b      	movs	r3, #27
 8002de4:	2220      	movs	r2, #32
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	19db      	adds	r3, r3, r7
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e033      	b.n	8002e58 <UART_SetConfig+0x390>
 8002df0:	231b      	movs	r3, #27
 8002df2:	2220      	movs	r2, #32
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	19db      	adds	r3, r3, r7
 8002df8:	2204      	movs	r2, #4
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e02c      	b.n	8002e58 <UART_SetConfig+0x390>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	cfff69f3 	.word	0xcfff69f3
 8002e04:	ffffcfff 	.word	0xffffcfff
 8002e08:	40008000 	.word	0x40008000
 8002e0c:	40008400 	.word	0x40008400
 8002e10:	11fff4ff 	.word	0x11fff4ff
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	40004800 	.word	0x40004800
 8002e24:	40004c00 	.word	0x40004c00
 8002e28:	40005000 	.word	0x40005000
 8002e2c:	40013c00 	.word	0x40013c00
 8002e30:	231b      	movs	r3, #27
 8002e32:	2220      	movs	r2, #32
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	19db      	adds	r3, r3, r7
 8002e38:	2208      	movs	r2, #8
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e00c      	b.n	8002e58 <UART_SetConfig+0x390>
 8002e3e:	231b      	movs	r3, #27
 8002e40:	2220      	movs	r2, #32
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	19db      	adds	r3, r3, r7
 8002e46:	2210      	movs	r2, #16
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e005      	b.n	8002e58 <UART_SetConfig+0x390>
 8002e4c:	231b      	movs	r3, #27
 8002e4e:	2220      	movs	r2, #32
 8002e50:	189b      	adds	r3, r3, r2
 8002e52:	19db      	adds	r3, r3, r7
 8002e54:	2210      	movs	r2, #16
 8002e56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4ac1      	ldr	r2, [pc, #772]	; (8003164 <UART_SetConfig+0x69c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d005      	beq.n	8002e6e <UART_SetConfig+0x3a6>
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4ac0      	ldr	r2, [pc, #768]	; (8003168 <UART_SetConfig+0x6a0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d000      	beq.n	8002e6e <UART_SetConfig+0x3a6>
 8002e6c:	e093      	b.n	8002f96 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e6e:	231b      	movs	r3, #27
 8002e70:	2220      	movs	r2, #32
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	19db      	adds	r3, r3, r7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d015      	beq.n	8002ea8 <UART_SetConfig+0x3e0>
 8002e7c:	dc18      	bgt.n	8002eb0 <UART_SetConfig+0x3e8>
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d00d      	beq.n	8002e9e <UART_SetConfig+0x3d6>
 8002e82:	dc15      	bgt.n	8002eb0 <UART_SetConfig+0x3e8>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <UART_SetConfig+0x3c6>
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d005      	beq.n	8002e98 <UART_SetConfig+0x3d0>
 8002e8c:	e010      	b.n	8002eb0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8e:	f7fe ff27 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002e92:	0003      	movs	r3, r0
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e96:	e014      	b.n	8002ec2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e98:	4bb4      	ldr	r3, [pc, #720]	; (800316c <UART_SetConfig+0x6a4>)
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e9c:	e011      	b.n	8002ec2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9e:	f7fe fe93 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ea6:	e00c      	b.n	8002ec2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002eae:	e008      	b.n	8002ec2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002eb4:	231a      	movs	r3, #26
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
        break;
 8002ec0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d100      	bne.n	8002eca <UART_SetConfig+0x402>
 8002ec8:	e135      	b.n	8003136 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ece:	4ba8      	ldr	r3, [pc, #672]	; (8003170 <UART_SetConfig+0x6a8>)
 8002ed0:	0052      	lsls	r2, r2, #1
 8002ed2:	5ad3      	ldrh	r3, [r2, r3]
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ed8:	f7fd f914 	bl	8000104 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	189b      	adds	r3, r3, r2
 8002eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d305      	bcc.n	8002efc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d906      	bls.n	8002f0a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002efc:	231a      	movs	r3, #26
 8002efe:	2220      	movs	r2, #32
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	19db      	adds	r3, r3, r7
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e044      	b.n	8002f94 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f16:	4b96      	ldr	r3, [pc, #600]	; (8003170 <UART_SetConfig+0x6a8>)
 8002f18:	0052      	lsls	r2, r2, #1
 8002f1a:	5ad3      	ldrh	r3, [r2, r3]
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	69b8      	ldr	r0, [r7, #24]
 8002f28:	69f9      	ldr	r1, [r7, #28]
 8002f2a:	f7fd fa61 	bl	80003f0 <__aeabi_uldivmod>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	000b      	movs	r3, r1
 8002f32:	0e11      	lsrs	r1, r2, #24
 8002f34:	021d      	lsls	r5, r3, #8
 8002f36:	430d      	orrs	r5, r1
 8002f38:	0214      	lsls	r4, r2, #8
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68b8      	ldr	r0, [r7, #8]
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	1900      	adds	r0, r0, r4
 8002f4c:	4169      	adcs	r1, r5
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f7fd fa48 	bl	80003f0 <__aeabi_uldivmod>
 8002f60:	0002      	movs	r2, r0
 8002f62:	000b      	movs	r3, r1
 8002f64:	0013      	movs	r3, r2
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	23c0      	movs	r3, #192	; 0xc0
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d309      	bcc.n	8002f86 <UART_SetConfig+0x4be>
 8002f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	035b      	lsls	r3, r3, #13
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d204      	bcs.n	8002f86 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	e006      	b.n	8002f94 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002f86:	231a      	movs	r3, #26
 8002f88:	2220      	movs	r2, #32
 8002f8a:	189b      	adds	r3, r3, r2
 8002f8c:	19db      	adds	r3, r3, r7
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002f92:	e0d0      	b.n	8003136 <UART_SetConfig+0x66e>
 8002f94:	e0cf      	b.n	8003136 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d000      	beq.n	8002fa4 <UART_SetConfig+0x4dc>
 8002fa2:	e070      	b.n	8003086 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002fa4:	231b      	movs	r3, #27
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d015      	beq.n	8002fde <UART_SetConfig+0x516>
 8002fb2:	dc18      	bgt.n	8002fe6 <UART_SetConfig+0x51e>
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d00d      	beq.n	8002fd4 <UART_SetConfig+0x50c>
 8002fb8:	dc15      	bgt.n	8002fe6 <UART_SetConfig+0x51e>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <UART_SetConfig+0x4fc>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d005      	beq.n	8002fce <UART_SetConfig+0x506>
 8002fc2:	e010      	b.n	8002fe6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f7fe fe8c 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fcc:	e014      	b.n	8002ff8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fce:	4b67      	ldr	r3, [pc, #412]	; (800316c <UART_SetConfig+0x6a4>)
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fd2:	e011      	b.n	8002ff8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd4:	f7fe fdf8 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fdc:	e00c      	b.n	8002ff8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fe4:	e008      	b.n	8002ff8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002fea:	231a      	movs	r3, #26
 8002fec:	2220      	movs	r2, #32
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	19db      	adds	r3, r3, r7
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        break;
 8002ff6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d100      	bne.n	8003000 <UART_SetConfig+0x538>
 8002ffe:	e09a      	b.n	8003136 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003004:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <UART_SetConfig+0x6a8>)
 8003006:	0052      	lsls	r2, r2, #1
 8003008:	5ad3      	ldrh	r3, [r2, r3]
 800300a:	0019      	movs	r1, r3
 800300c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800300e:	f7fd f879 	bl	8000104 <__udivsi3>
 8003012:	0003      	movs	r3, r0
 8003014:	005a      	lsls	r2, r3, #1
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	18d2      	adds	r2, r2, r3
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f7fd f86d 	bl	8000104 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b0f      	cmp	r3, #15
 8003032:	d921      	bls.n	8003078 <UART_SetConfig+0x5b0>
 8003034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	025b      	lsls	r3, r3, #9
 800303a:	429a      	cmp	r2, r3
 800303c:	d21c      	bcs.n	8003078 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	b29a      	uxth	r2, r3
 8003042:	200e      	movs	r0, #14
 8003044:	2420      	movs	r4, #32
 8003046:	1903      	adds	r3, r0, r4
 8003048:	19db      	adds	r3, r3, r7
 800304a:	210f      	movs	r1, #15
 800304c:	438a      	bics	r2, r1
 800304e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	2207      	movs	r2, #7
 8003058:	4013      	ands	r3, r2
 800305a:	b299      	uxth	r1, r3
 800305c:	1903      	adds	r3, r0, r4
 800305e:	19db      	adds	r3, r3, r7
 8003060:	1902      	adds	r2, r0, r4
 8003062:	19d2      	adds	r2, r2, r7
 8003064:	8812      	ldrh	r2, [r2, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1902      	adds	r2, r0, r4
 8003070:	19d2      	adds	r2, r2, r7
 8003072:	8812      	ldrh	r2, [r2, #0]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	e05e      	b.n	8003136 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003078:	231a      	movs	r3, #26
 800307a:	2220      	movs	r2, #32
 800307c:	189b      	adds	r3, r3, r2
 800307e:	19db      	adds	r3, r3, r7
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e057      	b.n	8003136 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003086:	231b      	movs	r3, #27
 8003088:	2220      	movs	r2, #32
 800308a:	189b      	adds	r3, r3, r2
 800308c:	19db      	adds	r3, r3, r7
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d015      	beq.n	80030c0 <UART_SetConfig+0x5f8>
 8003094:	dc18      	bgt.n	80030c8 <UART_SetConfig+0x600>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d00d      	beq.n	80030b6 <UART_SetConfig+0x5ee>
 800309a:	dc15      	bgt.n	80030c8 <UART_SetConfig+0x600>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <UART_SetConfig+0x5de>
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d005      	beq.n	80030b0 <UART_SetConfig+0x5e8>
 80030a4:	e010      	b.n	80030c8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a6:	f7fe fe1b 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 80030aa:	0003      	movs	r3, r0
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030ae:	e014      	b.n	80030da <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <UART_SetConfig+0x6a4>)
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030b4:	e011      	b.n	80030da <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b6:	f7fe fd87 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 80030ba:	0003      	movs	r3, r0
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030be:	e00c      	b.n	80030da <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80030c6:	e008      	b.n	80030da <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80030cc:	231a      	movs	r3, #26
 80030ce:	2220      	movs	r2, #32
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
        break;
 80030d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d02a      	beq.n	8003136 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <UART_SetConfig+0x6a8>)
 80030e6:	0052      	lsls	r2, r2, #1
 80030e8:	5ad3      	ldrh	r3, [r2, r3]
 80030ea:	0019      	movs	r1, r3
 80030ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030ee:	f7fd f809 	bl	8000104 <__udivsi3>
 80030f2:	0003      	movs	r3, r0
 80030f4:	001a      	movs	r2, r3
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	18d2      	adds	r2, r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0019      	movs	r1, r3
 8003104:	0010      	movs	r0, r2
 8003106:	f7fc fffd 	bl	8000104 <__udivsi3>
 800310a:	0003      	movs	r3, r0
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	2b0f      	cmp	r3, #15
 8003112:	d90a      	bls.n	800312a <UART_SetConfig+0x662>
 8003114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	025b      	lsls	r3, r3, #9
 800311a:	429a      	cmp	r2, r3
 800311c:	d205      	bcs.n	800312a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	b29a      	uxth	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	e005      	b.n	8003136 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800312a:	231a      	movs	r3, #26
 800312c:	2220      	movs	r2, #32
 800312e:	189b      	adds	r3, r3, r2
 8003130:	19db      	adds	r3, r3, r7
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	226a      	movs	r2, #106	; 0x6a
 800313a:	2101      	movs	r1, #1
 800313c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2268      	movs	r2, #104	; 0x68
 8003142:	2101      	movs	r1, #1
 8003144:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	2200      	movs	r2, #0
 800314a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	2200      	movs	r2, #0
 8003150:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003152:	231a      	movs	r3, #26
 8003154:	2220      	movs	r2, #32
 8003156:	189b      	adds	r3, r3, r2
 8003158:	19db      	adds	r3, r3, r7
 800315a:	781b      	ldrb	r3, [r3, #0]
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b010      	add	sp, #64	; 0x40
 8003162:	bdb0      	pop	{r4, r5, r7, pc}
 8003164:	40008000 	.word	0x40008000
 8003168:	40008400 	.word	0x40008400
 800316c:	00f42400 	.word	0x00f42400
 8003170:	08004638 	.word	0x08004638

08003174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	2208      	movs	r2, #8
 8003182:	4013      	ands	r3, r2
 8003184:	d00b      	beq.n	800319e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a4a      	ldr	r2, [pc, #296]	; (80032b8 <UART_AdvFeatureConfig+0x144>)
 800318e:	4013      	ands	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4a43      	ldr	r2, [pc, #268]	; (80032bc <UART_AdvFeatureConfig+0x148>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2202      	movs	r2, #2
 80031c6:	4013      	ands	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4a3b      	ldr	r2, [pc, #236]	; (80032c0 <UART_AdvFeatureConfig+0x14c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	2204      	movs	r2, #4
 80031e8:	4013      	ands	r3, r2
 80031ea:	d00b      	beq.n	8003204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <UART_AdvFeatureConfig+0x150>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	2210      	movs	r2, #16
 800320a:	4013      	ands	r3, r2
 800320c:	d00b      	beq.n	8003226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a2c      	ldr	r2, [pc, #176]	; (80032c8 <UART_AdvFeatureConfig+0x154>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	2220      	movs	r2, #32
 800322c:	4013      	ands	r3, r2
 800322e:	d00b      	beq.n	8003248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	4a25      	ldr	r2, [pc, #148]	; (80032cc <UART_AdvFeatureConfig+0x158>)
 8003238:	4013      	ands	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	2240      	movs	r2, #64	; 0x40
 800324e:	4013      	ands	r3, r2
 8003250:	d01d      	beq.n	800328e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <UART_AdvFeatureConfig+0x15c>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	035b      	lsls	r3, r3, #13
 8003272:	429a      	cmp	r2, r3
 8003274:	d10b      	bne.n	800328e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <UART_AdvFeatureConfig+0x160>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	4013      	ands	r3, r2
 8003296:	d00b      	beq.n	80032b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <UART_AdvFeatureConfig+0x164>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
  }
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	ffff7fff 	.word	0xffff7fff
 80032bc:	fffdffff 	.word	0xfffdffff
 80032c0:	fffeffff 	.word	0xfffeffff
 80032c4:	fffbffff 	.word	0xfffbffff
 80032c8:	ffffefff 	.word	0xffffefff
 80032cc:	ffffdfff 	.word	0xffffdfff
 80032d0:	ffefffff 	.word	0xffefffff
 80032d4:	ff9fffff 	.word	0xff9fffff
 80032d8:	fff7ffff 	.word	0xfff7ffff

080032dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b092      	sub	sp, #72	; 0x48
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2290      	movs	r2, #144	; 0x90
 80032e8:	2100      	movs	r1, #0
 80032ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032ec:	f7fd fc40 	bl	8000b70 <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2208      	movs	r2, #8
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d12d      	bne.n	800335e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0391      	lsls	r1, r2, #14
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4a47      	ldr	r2, [pc, #284]	; (8003428 <UART_CheckIdleState+0x14c>)
 800330c:	9200      	str	r2, [sp, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	f000 f88e 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d022      	beq.n	800335e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8310 	mrs	r3, PRIMASK
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003320:	63bb      	str	r3, [r7, #56]	; 0x38
 8003322:	2301      	movs	r3, #1
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	438a      	bics	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2288      	movs	r2, #136	; 0x88
 800334e:	2120      	movs	r1, #32
 8003350:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2284      	movs	r2, #132	; 0x84
 8003356:	2100      	movs	r1, #0
 8003358:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e060      	b.n	8003420 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2204      	movs	r2, #4
 8003366:	4013      	ands	r3, r2
 8003368:	2b04      	cmp	r3, #4
 800336a:	d146      	bne.n	80033fa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	03d1      	lsls	r1, r2, #15
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <UART_CheckIdleState+0x14c>)
 8003376:	9200      	str	r2, [sp, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	f000 f859 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d03b      	beq.n	80033fa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003382:	f3ef 8310 	mrs	r3, PRIMASK
 8003386:	60fb      	str	r3, [r7, #12]
  return(result);
 8003388:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
 800338c:	2301      	movs	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4922      	ldr	r1, [pc, #136]	; (800342c <UART_CheckIdleState+0x150>)
 80033a4:	400a      	ands	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b4:	f3ef 8310 	mrs	r3, PRIMASK
 80033b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80033ba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	438a      	bics	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	228c      	movs	r2, #140	; 0x8c
 80033ea:	2120      	movs	r1, #32
 80033ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2284      	movs	r2, #132	; 0x84
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e012      	b.n	8003420 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2288      	movs	r2, #136	; 0x88
 80033fe:	2120      	movs	r1, #32
 8003400:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	228c      	movs	r2, #140	; 0x8c
 8003406:	2120      	movs	r1, #32
 8003408:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2284      	movs	r2, #132	; 0x84
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b010      	add	sp, #64	; 0x40
 8003426:	bd80      	pop	{r7, pc}
 8003428:	01ffffff 	.word	0x01ffffff
 800342c:	fffffedf 	.word	0xfffffedf

08003430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003440:	e051      	b.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3301      	adds	r3, #1
 8003446:	d04e      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003448:	f7fd fb92 	bl	8000b70 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	429a      	cmp	r2, r3
 8003456:	d302      	bcc.n	800345e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e051      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2204      	movs	r2, #4
 800346a:	4013      	ands	r3, r2
 800346c:	d03b      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d038      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d035      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2208      	movs	r2, #8
 8003482:	4013      	ands	r3, r2
 8003484:	2b08      	cmp	r3, #8
 8003486:	d111      	bne.n	80034ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2208      	movs	r2, #8
 800348e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f960 	bl	8003758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2290      	movs	r2, #144	; 0x90
 800349c:	2108      	movs	r1, #8
 800349e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2284      	movs	r2, #132	; 0x84
 80034a4:	2100      	movs	r1, #0
 80034a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e02c      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	401a      	ands	r2, r3
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	429a      	cmp	r2, r3
 80034be:	d112      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f943 	bl	8003758 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2290      	movs	r2, #144	; 0x90
 80034d6:	2120      	movs	r1, #32
 80034d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2284      	movs	r2, #132	; 0x84
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e00f      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	425a      	negs	r2, r3
 80034f6:	4153      	adcs	r3, r2
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	001a      	movs	r2, r3
 80034fc:	1dfb      	adds	r3, r7, #7
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d09e      	beq.n	8003442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b098      	sub	sp, #96	; 0x60
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	1dbb      	adds	r3, r7, #6
 800351c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1dba      	adds	r2, r7, #6
 8003528:	215c      	movs	r1, #92	; 0x5c
 800352a:	8812      	ldrh	r2, [r2, #0]
 800352c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1dba      	adds	r2, r7, #6
 8003532:	215e      	movs	r1, #94	; 0x5e
 8003534:	8812      	ldrh	r2, [r2, #0]
 8003536:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	015b      	lsls	r3, r3, #5
 8003546:	429a      	cmp	r2, r3
 8003548:	d10d      	bne.n	8003566 <UART_Start_Receive_IT+0x56>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <UART_Start_Receive_IT+0x4c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2260      	movs	r2, #96	; 0x60
 8003556:	497b      	ldr	r1, [pc, #492]	; (8003744 <UART_Start_Receive_IT+0x234>)
 8003558:	5299      	strh	r1, [r3, r2]
 800355a:	e02e      	b.n	80035ba <UART_Start_Receive_IT+0xaa>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2260      	movs	r2, #96	; 0x60
 8003560:	21ff      	movs	r1, #255	; 0xff
 8003562:	5299      	strh	r1, [r3, r2]
 8003564:	e029      	b.n	80035ba <UART_Start_Receive_IT+0xaa>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <UART_Start_Receive_IT+0x7a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <UART_Start_Receive_IT+0x70>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2260      	movs	r2, #96	; 0x60
 800357a:	21ff      	movs	r1, #255	; 0xff
 800357c:	5299      	strh	r1, [r3, r2]
 800357e:	e01c      	b.n	80035ba <UART_Start_Receive_IT+0xaa>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2260      	movs	r2, #96	; 0x60
 8003584:	217f      	movs	r1, #127	; 0x7f
 8003586:	5299      	strh	r1, [r3, r2]
 8003588:	e017      	b.n	80035ba <UART_Start_Receive_IT+0xaa>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	055b      	lsls	r3, r3, #21
 8003592:	429a      	cmp	r2, r3
 8003594:	d10d      	bne.n	80035b2 <UART_Start_Receive_IT+0xa2>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <UART_Start_Receive_IT+0x98>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2260      	movs	r2, #96	; 0x60
 80035a2:	217f      	movs	r1, #127	; 0x7f
 80035a4:	5299      	strh	r1, [r3, r2]
 80035a6:	e008      	b.n	80035ba <UART_Start_Receive_IT+0xaa>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2260      	movs	r2, #96	; 0x60
 80035ac:	213f      	movs	r1, #63	; 0x3f
 80035ae:	5299      	strh	r1, [r3, r2]
 80035b0:	e003      	b.n	80035ba <UART_Start_Receive_IT+0xaa>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2260      	movs	r2, #96	; 0x60
 80035b6:	2100      	movs	r1, #0
 80035b8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2290      	movs	r2, #144	; 0x90
 80035be:	2100      	movs	r1, #0
 80035c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	228c      	movs	r2, #140	; 0x8c
 80035c6:	2122      	movs	r1, #34	; 0x22
 80035c8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8310 	mrs	r3, PRIMASK
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80035d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d4:	2301      	movs	r3, #1
 80035d6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	059b      	lsls	r3, r3, #22
 8003604:	429a      	cmp	r2, r3
 8003606:	d150      	bne.n	80036aa <UART_Start_Receive_IT+0x19a>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2268      	movs	r2, #104	; 0x68
 800360c:	5a9b      	ldrh	r3, [r3, r2]
 800360e:	1dba      	adds	r2, r7, #6
 8003610:	8812      	ldrh	r2, [r2, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d349      	bcc.n	80036aa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	015b      	lsls	r3, r3, #5
 800361e:	429a      	cmp	r2, r3
 8003620:	d107      	bne.n	8003632 <UART_Start_Receive_IT+0x122>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d103      	bne.n	8003632 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a46      	ldr	r2, [pc, #280]	; (8003748 <UART_Start_Receive_IT+0x238>)
 800362e:	675a      	str	r2, [r3, #116]	; 0x74
 8003630:	e002      	b.n	8003638 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a45      	ldr	r2, [pc, #276]	; (800374c <UART_Start_Receive_IT+0x23c>)
 8003636:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d019      	beq.n	8003674 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003640:	f3ef 8310 	mrs	r3, PRIMASK
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003648:	65bb      	str	r3, [r7, #88]	; 0x58
 800364a:	2301      	movs	r3, #1
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	f383 8810 	msr	PRIMASK, r3
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	0049      	lsls	r1, r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	f383 8810 	msr	PRIMASK, r3
}
 8003672:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800367c:	657b      	str	r3, [r7, #84]	; 0x54
 800367e:	2301      	movs	r3, #1
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0549      	lsls	r1, r1, #21
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	e047      	b.n	800373a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	015b      	lsls	r3, r3, #5
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d107      	bne.n	80036c6 <UART_Start_Receive_IT+0x1b6>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a23      	ldr	r2, [pc, #140]	; (8003750 <UART_Start_Receive_IT+0x240>)
 80036c2:	675a      	str	r2, [r3, #116]	; 0x74
 80036c4:	e002      	b.n	80036cc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a22      	ldr	r2, [pc, #136]	; (8003754 <UART_Start_Receive_IT+0x244>)
 80036ca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d019      	beq.n	8003708 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d4:	f3ef 8310 	mrs	r3, PRIMASK
 80036d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80036da:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80036dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036de:	2301      	movs	r3, #1
 80036e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2190      	movs	r1, #144	; 0x90
 80036f6:	0049      	lsls	r1, r1, #1
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	e018      	b.n	800373a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	613b      	str	r3, [r7, #16]
  return(result);
 800370e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
 8003712:	2301      	movs	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2120      	movs	r1, #32
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b018      	add	sp, #96	; 0x60
 8003742:	bd80      	pop	{r7, pc}
 8003744:	000001ff 	.word	0x000001ff
 8003748:	08003fa1 	.word	0x08003fa1
 800374c:	08003c55 	.word	0x08003c55
 8003750:	08003a81 	.word	0x08003a81
 8003754:	080038ad 	.word	0x080038ad

08003758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003760:	f3ef 8310 	mrs	r3, PRIMASK
 8003764:	617b      	str	r3, [r7, #20]
  return(result);
 8003766:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
 800376a:	2301      	movs	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f383 8810 	msr	PRIMASK, r3
}
 8003774:	46c0      	nop			; (mov r8, r8)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4926      	ldr	r1, [pc, #152]	; (800381c <UART_EndRxTransfer+0xc4>)
 8003782:	400a      	ands	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	f383 8810 	msr	PRIMASK, r3
}
 8003790:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	623b      	str	r3, [r7, #32]
  return(result);
 8003798:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
 800379c:	2301      	movs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	491b      	ldr	r1, [pc, #108]	; (8003820 <UART_EndRxTransfer+0xc8>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	f383 8810 	msr	PRIMASK, r3
}
 80037c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d118      	bne.n	80037fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037cc:	f3ef 8310 	mrs	r3, PRIMASK
 80037d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d6:	2301      	movs	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2110      	movs	r1, #16
 80037ee:	438a      	bics	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	228c      	movs	r2, #140	; 0x8c
 8003802:	2120      	movs	r1, #32
 8003804:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b00e      	add	sp, #56	; 0x38
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	fffffedf 	.word	0xfffffedf
 8003820:	effffffe 	.word	0xeffffffe

08003824 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	225e      	movs	r2, #94	; 0x5e
 8003836:	2100      	movs	r1, #0
 8003838:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2256      	movs	r2, #86	; 0x56
 800383e:	2100      	movs	r1, #0
 8003840:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff f92b 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385a:	f3ef 8310 	mrs	r3, PRIMASK
 800385e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003860:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	2301      	movs	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2288      	movs	r2, #136	; 0x88
 8003890:	2120      	movs	r1, #32
 8003892:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff f8f7 	bl	8002a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b006      	add	sp, #24
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b094      	sub	sp, #80	; 0x50
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038b4:	204e      	movs	r0, #78	; 0x4e
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	2160      	movs	r1, #96	; 0x60
 80038bc:	5a52      	ldrh	r2, [r2, r1]
 80038be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	228c      	movs	r2, #140	; 0x8c
 80038c4:	589b      	ldr	r3, [r3, r2]
 80038c6:	2b22      	cmp	r3, #34	; 0x22
 80038c8:	d000      	beq.n	80038cc <UART_RxISR_8BIT+0x20>
 80038ca:	e0c4      	b.n	8003a56 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d2:	214c      	movs	r1, #76	; 0x4c
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	183b      	adds	r3, r7, r0
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b2d9      	uxtb	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	400a      	ands	r2, r1
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	225e      	movs	r2, #94	; 0x5e
 80038fc:	5a9b      	ldrh	r3, [r3, r2]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b299      	uxth	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	225e      	movs	r2, #94	; 0x5e
 8003908:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	225e      	movs	r2, #94	; 0x5e
 800390e:	5a9b      	ldrh	r3, [r3, r2]
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d000      	beq.n	8003918 <UART_RxISR_8BIT+0x6c>
 8003916:	e0a6      	b.n	8003a66 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8310 	mrs	r3, PRIMASK
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
 8003922:	2301      	movs	r3, #1
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	494d      	ldr	r1, [pc, #308]	; (8003a70 <UART_RxISR_8BIT+0x1c4>)
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394a:	f3ef 8310 	mrs	r3, PRIMASK
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	647b      	str	r3, [r7, #68]	; 0x44
 8003954:	2301      	movs	r3, #1
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	438a      	bics	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	228c      	movs	r2, #140	; 0x8c
 8003980:	2120      	movs	r1, #32
 8003982:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a37      	ldr	r2, [pc, #220]	; (8003a74 <UART_RxISR_8BIT+0x1c8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d024      	beq.n	80039e4 <UART_RxISR_8BIT+0x138>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a36      	ldr	r2, [pc, #216]	; (8003a78 <UART_RxISR_8BIT+0x1cc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01f      	beq.n	80039e4 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	4013      	ands	r3, r2
 80039b0:	d018      	beq.n	80039e4 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b2:	f3ef 8310 	mrs	r3, PRIMASK
 80039b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80039b8:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039ba:	643b      	str	r3, [r7, #64]	; 0x40
 80039bc:	2301      	movs	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f383 8810 	msr	PRIMASK, r3
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	492a      	ldr	r1, [pc, #168]	; (8003a7c <UART_RxISR_8BIT+0x1d0>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f383 8810 	msr	PRIMASK, r3
}
 80039e2:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d12f      	bne.n	8003a4c <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f2:	f3ef 8310 	mrs	r3, PRIMASK
 80039f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80039f8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039fc:	2301      	movs	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f383 8810 	msr	PRIMASK, r3
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2110      	movs	r1, #16
 8003a14:	438a      	bics	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2210      	movs	r2, #16
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d103      	bne.n	8003a3a <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2210      	movs	r2, #16
 8003a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	225c      	movs	r2, #92	; 0x5c
 8003a3e:	5a9a      	ldrh	r2, [r3, r2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff f833 	bl	8002ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a4a:	e00c      	b.n	8003a66 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7fc fefe 	bl	8000850 <HAL_UART_RxCpltCallback>
}
 8003a54:	e007      	b.n	8003a66 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2108      	movs	r1, #8
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b014      	add	sp, #80	; 0x50
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	fffffedf 	.word	0xfffffedf
 8003a74:	40008000 	.word	0x40008000
 8003a78:	40008400 	.word	0x40008400
 8003a7c:	fbffffff 	.word	0xfbffffff

08003a80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b094      	sub	sp, #80	; 0x50
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a88:	204e      	movs	r0, #78	; 0x4e
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	2160      	movs	r1, #96	; 0x60
 8003a90:	5a52      	ldrh	r2, [r2, r1]
 8003a92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	228c      	movs	r2, #140	; 0x8c
 8003a98:	589b      	ldr	r3, [r3, r2]
 8003a9a:	2b22      	cmp	r3, #34	; 0x22
 8003a9c:	d000      	beq.n	8003aa0 <UART_RxISR_16BIT+0x20>
 8003a9e:	e0c4      	b.n	8003c2a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	214c      	movs	r1, #76	; 0x4c
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	183a      	adds	r2, r7, r0
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	4013      	ands	r3, r2
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	225e      	movs	r2, #94	; 0x5e
 8003ad0:	5a9b      	ldrh	r3, [r3, r2]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b299      	uxth	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	225e      	movs	r2, #94	; 0x5e
 8003adc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	225e      	movs	r2, #94	; 0x5e
 8003ae2:	5a9b      	ldrh	r3, [r3, r2]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d000      	beq.n	8003aec <UART_RxISR_16BIT+0x6c>
 8003aea:	e0a6      	b.n	8003c3a <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	623b      	str	r3, [r7, #32]
  return(result);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	f383 8810 	msr	PRIMASK, r3
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <UART_RxISR_16BIT+0x1c4>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	f383 8810 	msr	PRIMASK, r3
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	643b      	str	r3, [r7, #64]	; 0x40
 8003b28:	2301      	movs	r3, #1
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	438a      	bics	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	228c      	movs	r2, #140	; 0x8c
 8003b54:	2120      	movs	r1, #32
 8003b56:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a37      	ldr	r2, [pc, #220]	; (8003c48 <UART_RxISR_16BIT+0x1c8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d024      	beq.n	8003bb8 <UART_RxISR_16BIT+0x138>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a36      	ldr	r2, [pc, #216]	; (8003c4c <UART_RxISR_16BIT+0x1cc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01f      	beq.n	8003bb8 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	4013      	ands	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b86:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8a:	617b      	str	r3, [r7, #20]
  return(result);
 8003b8c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b90:	2301      	movs	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	492a      	ldr	r1, [pc, #168]	; (8003c50 <UART_RxISR_16BIT+0x1d0>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d12f      	bne.n	8003c20 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bca:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bcc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f383 8810 	msr	PRIMASK, r3
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2110      	movs	r1, #16
 8003be8:	438a      	bics	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d103      	bne.n	8003c0e <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	225c      	movs	r2, #92	; 0x5c
 8003c12:	5a9a      	ldrh	r2, [r3, r2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	0011      	movs	r1, r2
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7fe ff49 	bl	8002ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c1e:	e00c      	b.n	8003c3a <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fc fe14 	bl	8000850 <HAL_UART_RxCpltCallback>
}
 8003c28:	e007      	b.n	8003c3a <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2108      	movs	r1, #8
 8003c36:	430a      	orrs	r2, r1
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b014      	add	sp, #80	; 0x50
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	fffffedf 	.word	0xfffffedf
 8003c48:	40008000 	.word	0x40008000
 8003c4c:	40008400 	.word	0x40008400
 8003c50:	fbffffff 	.word	0xfbffffff

08003c54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b0a0      	sub	sp, #128	; 0x80
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003c5c:	237a      	movs	r3, #122	; 0x7a
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	2160      	movs	r1, #96	; 0x60
 8003c64:	5a52      	ldrh	r2, [r2, r1]
 8003c66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	228c      	movs	r2, #140	; 0x8c
 8003c84:	589b      	ldr	r3, [r3, r2]
 8003c86:	2b22      	cmp	r3, #34	; 0x22
 8003c88:	d000      	beq.n	8003c8c <UART_RxISR_8BIT_FIFOEN+0x38>
 8003c8a:	e16f      	b.n	8003f6c <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003c8c:	236e      	movs	r3, #110	; 0x6e
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	2168      	movs	r1, #104	; 0x68
 8003c94:	5a52      	ldrh	r2, [r2, r1]
 8003c96:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003c98:	e116      	b.n	8003ec8 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca0:	216c      	movs	r1, #108	; 0x6c
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ca6:	187b      	adds	r3, r7, r1
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	237a      	movs	r3, #122	; 0x7a
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b2d9      	uxtb	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	400a      	ands	r2, r1
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	225e      	movs	r2, #94	; 0x5e
 8003ccc:	5a9b      	ldrh	r3, [r3, r2]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b299      	uxth	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	225e      	movs	r2, #94	; 0x5e
 8003cd8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d049      	beq.n	8003d7e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d010      	beq.n	8003d14 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2201      	movs	r2, #1
 8003d02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2290      	movs	r2, #144	; 0x90
 8003d08:	589b      	ldr	r3, [r3, r2]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2190      	movs	r1, #144	; 0x90
 8003d12:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d16:	2202      	movs	r2, #2
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d00f      	beq.n	8003d3c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4013      	ands	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2290      	movs	r2, #144	; 0x90
 8003d30:	589b      	ldr	r3, [r3, r2]
 8003d32:	2204      	movs	r2, #4
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2190      	movs	r1, #144	; 0x90
 8003d3a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d3e:	2204      	movs	r2, #4
 8003d40:	4013      	ands	r3, r2
 8003d42:	d00f      	beq.n	8003d64 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d46:	2201      	movs	r2, #1
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2204      	movs	r2, #4
 8003d52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2290      	movs	r2, #144	; 0x90
 8003d58:	589b      	ldr	r3, [r3, r2]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2190      	movs	r1, #144	; 0x90
 8003d62:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2290      	movs	r2, #144	; 0x90
 8003d68:	589b      	ldr	r3, [r3, r2]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7fe fe95 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2290      	movs	r2, #144	; 0x90
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	225e      	movs	r2, #94	; 0x5e
 8003d82:	5a9b      	ldrh	r3, [r3, r2]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d000      	beq.n	8003d8c <UART_RxISR_8BIT_FIFOEN+0x138>
 8003d8a:	e09d      	b.n	8003ec8 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d96:	2301      	movs	r3, #1
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4975      	ldr	r1, [pc, #468]	; (8003f84 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8003dae:	400a      	ands	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc2:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc8:	2301      	movs	r3, #1
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dce:	f383 8810 	msr	PRIMASK, r3
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	496a      	ldr	r1, [pc, #424]	; (8003f88 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	228c      	movs	r2, #140	; 0x8c
 8003df4:	2120      	movs	r1, #32
 8003df6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a60      	ldr	r2, [pc, #384]	; (8003f8c <UART_RxISR_8BIT_FIFOEN+0x338>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d024      	beq.n	8003e58 <UART_RxISR_8BIT_FIFOEN+0x204>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5f      	ldr	r2, [pc, #380]	; (8003f90 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01f      	beq.n	8003e58 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	4013      	ands	r3, r2
 8003e24:	d018      	beq.n	8003e58 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e30:	2301      	movs	r3, #1
 8003e32:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4953      	ldr	r1, [pc, #332]	; (8003f94 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8003e48:	400a      	ands	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d12f      	bne.n	8003ec0 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2110      	movs	r1, #16
 8003e88:	438a      	bics	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d103      	bne.n	8003eae <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2210      	movs	r2, #16
 8003eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	225c      	movs	r2, #92	; 0x5c
 8003eb2:	5a9a      	ldrh	r2, [r3, r2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0011      	movs	r1, r2
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fe fdf9 	bl	8002ab0 <HAL_UARTEx_RxEventCallback>
 8003ebe:	e003      	b.n	8003ec8 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fc fcc4 	bl	8000850 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ec8:	236e      	movs	r3, #110	; 0x6e
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <UART_RxISR_8BIT_FIFOEN+0x288>
 8003ed2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d000      	beq.n	8003edc <UART_RxISR_8BIT_FIFOEN+0x288>
 8003eda:	e6de      	b.n	8003c9a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003edc:	205a      	movs	r0, #90	; 0x5a
 8003ede:	183b      	adds	r3, r7, r0
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	215e      	movs	r1, #94	; 0x5e
 8003ee4:	5a52      	ldrh	r2, [r2, r1]
 8003ee6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ee8:	0001      	movs	r1, r0
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <UART_RxISR_8BIT_FIFOEN+0x328>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2268      	movs	r2, #104	; 0x68
 8003ef6:	5a9b      	ldrh	r3, [r3, r2]
 8003ef8:	187a      	adds	r2, r7, r1
 8003efa:	8812      	ldrh	r2, [r2, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d23d      	bcs.n	8003f7c <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f00:	f3ef 8310 	mrs	r3, PRIMASK
 8003f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f06:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f08:	657b      	str	r3, [r7, #84]	; 0x54
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	491d      	ldr	r1, [pc, #116]	; (8003f98 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f383 8810 	msr	PRIMASK, r3
}
 8003f30:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <UART_RxISR_8BIT_FIFOEN+0x348>)
 8003f36:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 8003f42:	2301      	movs	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f383 8810 	msr	PRIMASK, r3
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2120      	movs	r1, #32
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f6a:	e007      	b.n	8003f7c <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2108      	movs	r1, #8
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	619a      	str	r2, [r3, #24]
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b020      	add	sp, #128	; 0x80
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	fffffeff 	.word	0xfffffeff
 8003f88:	effffffe 	.word	0xeffffffe
 8003f8c:	40008000 	.word	0x40008000
 8003f90:	40008400 	.word	0x40008400
 8003f94:	fbffffff 	.word	0xfbffffff
 8003f98:	efffffff 	.word	0xefffffff
 8003f9c:	080038ad 	.word	0x080038ad

08003fa0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0a2      	sub	sp, #136	; 0x88
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003fa8:	2382      	movs	r3, #130	; 0x82
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	2160      	movs	r1, #96	; 0x60
 8003fb0:	5a52      	ldrh	r2, [r2, r1]
 8003fb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2284      	movs	r2, #132	; 0x84
 8003fbc:	18ba      	adds	r2, r7, r2
 8003fbe:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	228c      	movs	r2, #140	; 0x8c
 8003fd4:	589b      	ldr	r3, [r3, r2]
 8003fd6:	2b22      	cmp	r3, #34	; 0x22
 8003fd8:	d000      	beq.n	8003fdc <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003fda:	e179      	b.n	80042d0 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003fdc:	2376      	movs	r3, #118	; 0x76
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	2168      	movs	r1, #104	; 0x68
 8003fe4:	5a52      	ldrh	r2, [r2, r1]
 8003fe6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003fe8:	e11e      	b.n	8004228 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff0:	2174      	movs	r1, #116	; 0x74
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2282      	movs	r2, #130	; 0x82
 8004000:	18ba      	adds	r2, r7, r2
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	8812      	ldrh	r2, [r2, #0]
 8004006:	4013      	ands	r3, r2
 8004008:	b29a      	uxth	r2, r3
 800400a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800400c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	1c9a      	adds	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	225e      	movs	r2, #94	; 0x5e
 800401c:	5a9b      	ldrh	r3, [r3, r2]
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b299      	uxth	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	225e      	movs	r2, #94	; 0x5e
 8004028:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2184      	movs	r1, #132	; 0x84
 8004032:	187a      	adds	r2, r7, r1
 8004034:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004036:	187b      	adds	r3, r7, r1
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2207      	movs	r2, #7
 800403c:	4013      	ands	r3, r2
 800403e:	d04e      	beq.n	80040de <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004040:	187b      	adds	r3, r7, r1
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2201      	movs	r2, #1
 8004046:	4013      	ands	r3, r2
 8004048:	d010      	beq.n	800406c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800404a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2290      	movs	r2, #144	; 0x90
 8004060:	589b      	ldr	r3, [r3, r2]
 8004062:	2201      	movs	r2, #1
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2190      	movs	r1, #144	; 0x90
 800406a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800406c:	2384      	movs	r3, #132	; 0x84
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	4013      	ands	r3, r2
 8004076:	d00f      	beq.n	8004098 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407a:	2201      	movs	r2, #1
 800407c:	4013      	ands	r3, r2
 800407e:	d00b      	beq.n	8004098 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2202      	movs	r2, #2
 8004086:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2290      	movs	r2, #144	; 0x90
 800408c:	589b      	ldr	r3, [r3, r2]
 800408e:	2204      	movs	r2, #4
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2190      	movs	r1, #144	; 0x90
 8004096:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004098:	2384      	movs	r3, #132	; 0x84
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2204      	movs	r2, #4
 80040a0:	4013      	ands	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <UART_RxISR_16BIT_FIFOEN+0x124>
 80040a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2204      	movs	r2, #4
 80040b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2290      	movs	r2, #144	; 0x90
 80040b8:	589b      	ldr	r3, [r3, r2]
 80040ba:	2202      	movs	r2, #2
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2190      	movs	r1, #144	; 0x90
 80040c2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2290      	movs	r2, #144	; 0x90
 80040c8:	589b      	ldr	r3, [r3, r2]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7fe fce5 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2290      	movs	r2, #144	; 0x90
 80040da:	2100      	movs	r1, #0
 80040dc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	225e      	movs	r2, #94	; 0x5e
 80040e2:	5a9b      	ldrh	r3, [r3, r2]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d000      	beq.n	80040ec <UART_RxISR_16BIT_FIFOEN+0x14c>
 80040ea:	e09d      	b.n	8004228 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ec:	f3ef 8310 	mrs	r3, PRIMASK
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040f6:	2301      	movs	r3, #1
 80040f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fc:	f383 8810 	msr	PRIMASK, r3
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4976      	ldr	r1, [pc, #472]	; (80042e8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800410e:	400a      	ands	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004118:	f383 8810 	msr	PRIMASK, r3
}
 800411c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411e:	f3ef 8310 	mrs	r3, PRIMASK
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004124:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004126:	66bb      	str	r3, [r7, #104]	; 0x68
 8004128:	2301      	movs	r3, #1
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	496b      	ldr	r1, [pc, #428]	; (80042ec <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004140:	400a      	ands	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	228c      	movs	r2, #140	; 0x8c
 8004154:	2120      	movs	r1, #32
 8004156:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a61      	ldr	r2, [pc, #388]	; (80042f0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d024      	beq.n	80041b8 <UART_RxISR_16BIT_FIFOEN+0x218>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a60      	ldr	r2, [pc, #384]	; (80042f4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01f      	beq.n	80041b8 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	4013      	ands	r3, r2
 8004184:	d018      	beq.n	80041b8 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004186:	f3ef 8310 	mrs	r3, PRIMASK
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800418e:	667b      	str	r3, [r7, #100]	; 0x64
 8004190:	2301      	movs	r3, #1
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4954      	ldr	r1, [pc, #336]	; (80042f8 <UART_RxISR_16BIT_FIFOEN+0x358>)
 80041a8:	400a      	ands	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d12f      	bne.n	8004220 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	663b      	str	r3, [r7, #96]	; 0x60
 80041d0:	2301      	movs	r3, #1
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2110      	movs	r1, #16
 80041e8:	438a      	bics	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	f383 8810 	msr	PRIMASK, r3
}
 80041f6:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2210      	movs	r2, #16
 8004200:	4013      	ands	r3, r2
 8004202:	2b10      	cmp	r3, #16
 8004204:	d103      	bne.n	800420e <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2210      	movs	r2, #16
 800420c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	225c      	movs	r2, #92	; 0x5c
 8004212:	5a9a      	ldrh	r2, [r3, r2]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f7fe fc49 	bl	8002ab0 <HAL_UARTEx_RxEventCallback>
 800421e:	e003      	b.n	8004228 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f7fc fb14 	bl	8000850 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004228:	2376      	movs	r3, #118	; 0x76
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8004232:	2384      	movs	r3, #132	; 0x84
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2220      	movs	r2, #32
 800423a:	4013      	ands	r3, r2
 800423c:	d000      	beq.n	8004240 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800423e:	e6d4      	b.n	8003fea <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004240:	205e      	movs	r0, #94	; 0x5e
 8004242:	183b      	adds	r3, r7, r0
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	215e      	movs	r1, #94	; 0x5e
 8004248:	5a52      	ldrh	r2, [r2, r1]
 800424a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800424c:	0001      	movs	r1, r0
 800424e:	187b      	adds	r3, r7, r1
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d044      	beq.n	80042e0 <UART_RxISR_16BIT_FIFOEN+0x340>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2268      	movs	r2, #104	; 0x68
 800425a:	5a9b      	ldrh	r3, [r3, r2]
 800425c:	187a      	adds	r2, r7, r1
 800425e:	8812      	ldrh	r2, [r2, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d23d      	bcs.n	80042e0 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004264:	f3ef 8310 	mrs	r3, PRIMASK
 8004268:	60fb      	str	r3, [r7, #12]
  return(result);
 800426a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800426c:	65bb      	str	r3, [r7, #88]	; 0x58
 800426e:	2301      	movs	r3, #1
 8004270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f383 8810 	msr	PRIMASK, r3
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	491d      	ldr	r1, [pc, #116]	; (80042fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8004286:	400a      	ands	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f383 8810 	msr	PRIMASK, r3
}
 8004294:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800429a:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429c:	f3ef 8310 	mrs	r3, PRIMASK
 80042a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80042a2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80042a4:	657b      	str	r3, [r7, #84]	; 0x54
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f383 8810 	msr	PRIMASK, r3
}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2120      	movs	r1, #32
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f383 8810 	msr	PRIMASK, r3
}
 80042cc:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042ce:	e007      	b.n	80042e0 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2108      	movs	r1, #8
 80042dc:	430a      	orrs	r2, r1
 80042de:	619a      	str	r2, [r3, #24]
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b022      	add	sp, #136	; 0x88
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	fffffeff 	.word	0xfffffeff
 80042ec:	effffffe 	.word	0xeffffffe
 80042f0:	40008000 	.word	0x40008000
 80042f4:	40008400 	.word	0x40008400
 80042f8:	fbffffff 	.word	0xfbffffff
 80042fc:	efffffff 	.word	0xefffffff
 8004300:	08003a81 	.word	0x08003a81

08004304 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2284      	movs	r2, #132	; 0x84
 8004340:	5c9b      	ldrb	r3, [r3, r2]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_UARTEx_DisableFifoMode+0x16>
 8004346:	2302      	movs	r3, #2
 8004348:	e027      	b.n	800439a <HAL_UARTEx_DisableFifoMode+0x66>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2284      	movs	r2, #132	; 0x84
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2288      	movs	r2, #136	; 0x88
 8004356:	2124      	movs	r1, #36	; 0x24
 8004358:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2101      	movs	r1, #1
 800436e:	438a      	bics	r2, r1
 8004370:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2288      	movs	r2, #136	; 0x88
 800438c:	2120      	movs	r1, #32
 800438e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2284      	movs	r2, #132	; 0x84
 8004394:	2100      	movs	r1, #0
 8004396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	dfffffff 	.word	0xdfffffff

080043a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2284      	movs	r2, #132	; 0x84
 80043b6:	5c9b      	ldrb	r3, [r3, r2]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043bc:	2302      	movs	r3, #2
 80043be:	e02e      	b.n	800441e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2284      	movs	r2, #132	; 0x84
 80043c4:	2101      	movs	r1, #1
 80043c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2288      	movs	r2, #136	; 0x88
 80043cc:	2124      	movs	r1, #36	; 0x24
 80043ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2101      	movs	r1, #1
 80043e4:	438a      	bics	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	08d9      	lsrs	r1, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f854 	bl	80044ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2288      	movs	r2, #136	; 0x88
 8004410:	2120      	movs	r1, #32
 8004412:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2284      	movs	r2, #132	; 0x84
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b004      	add	sp, #16
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2284      	movs	r2, #132	; 0x84
 8004436:	5c9b      	ldrb	r3, [r3, r2]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e02f      	b.n	80044a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2284      	movs	r2, #132	; 0x84
 8004444:	2101      	movs	r1, #1
 8004446:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2288      	movs	r2, #136	; 0x88
 800444c:	2124      	movs	r1, #36	; 0x24
 800444e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2101      	movs	r1, #1
 8004464:	438a      	bics	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004470:	4013      	ands	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 f813 	bl	80044ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2288      	movs	r2, #136	; 0x88
 8004492:	2120      	movs	r1, #32
 8004494:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2284      	movs	r2, #132	; 0x84
 800449a:	2100      	movs	r1, #0
 800449c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b004      	add	sp, #16
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	f1ffffff 	.word	0xf1ffffff

080044ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	226a      	movs	r2, #106	; 0x6a
 80044c0:	2101      	movs	r1, #1
 80044c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2268      	movs	r2, #104	; 0x68
 80044c8:	2101      	movs	r1, #1
 80044ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044cc:	e043      	b.n	8004556 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044ce:	260f      	movs	r6, #15
 80044d0:	19bb      	adds	r3, r7, r6
 80044d2:	2208      	movs	r2, #8
 80044d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044d6:	200e      	movs	r0, #14
 80044d8:	183b      	adds	r3, r7, r0
 80044da:	2208      	movs	r2, #8
 80044dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0e5b      	lsrs	r3, r3, #25
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	240d      	movs	r4, #13
 80044ea:	193b      	adds	r3, r7, r4
 80044ec:	2107      	movs	r1, #7
 80044ee:	400a      	ands	r2, r1
 80044f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	0f5b      	lsrs	r3, r3, #29
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	250c      	movs	r5, #12
 80044fe:	197b      	adds	r3, r7, r5
 8004500:	2107      	movs	r1, #7
 8004502:	400a      	ands	r2, r1
 8004504:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004506:	183b      	adds	r3, r7, r0
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	197a      	adds	r2, r7, r5
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	4914      	ldr	r1, [pc, #80]	; (8004560 <UARTEx_SetNbDataToProcess+0xb4>)
 8004510:	5c8a      	ldrb	r2, [r1, r2]
 8004512:	435a      	muls	r2, r3
 8004514:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004516:	197b      	adds	r3, r7, r5
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <UARTEx_SetNbDataToProcess+0xb8>)
 800451c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800451e:	0019      	movs	r1, r3
 8004520:	f7fb fe7a 	bl	8000218 <__divsi3>
 8004524:	0003      	movs	r3, r0
 8004526:	b299      	uxth	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	226a      	movs	r2, #106	; 0x6a
 800452c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800452e:	19bb      	adds	r3, r7, r6
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	193a      	adds	r2, r7, r4
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	490a      	ldr	r1, [pc, #40]	; (8004560 <UARTEx_SetNbDataToProcess+0xb4>)
 8004538:	5c8a      	ldrb	r2, [r1, r2]
 800453a:	435a      	muls	r2, r3
 800453c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800453e:	193b      	adds	r3, r7, r4
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <UARTEx_SetNbDataToProcess+0xb8>)
 8004544:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004546:	0019      	movs	r1, r3
 8004548:	f7fb fe66 	bl	8000218 <__divsi3>
 800454c:	0003      	movs	r3, r0
 800454e:	b299      	uxth	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2268      	movs	r2, #104	; 0x68
 8004554:	5299      	strh	r1, [r3, r2]
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b005      	add	sp, #20
 800455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	08004650 	.word	0x08004650
 8004564:	08004658 	.word	0x08004658

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	2600      	movs	r6, #0
 800456c:	4d0c      	ldr	r5, [pc, #48]	; (80045a0 <__libc_init_array+0x38>)
 800456e:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	2600      	movs	r6, #0
 800457a:	f000 f821 	bl	80045c0 <_init>
 800457e:	4d0a      	ldr	r5, [pc, #40]	; (80045a8 <__libc_init_array+0x40>)
 8004580:	4c0a      	ldr	r4, [pc, #40]	; (80045ac <__libc_init_array+0x44>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	00b3      	lsls	r3, r6, #2
 800458e:	58eb      	ldr	r3, [r5, r3]
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	00b3      	lsls	r3, r6, #2
 8004598:	58eb      	ldr	r3, [r5, r3]
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	08004668 	.word	0x08004668
 80045a4:	08004668 	.word	0x08004668
 80045a8:	08004668 	.word	0x08004668
 80045ac:	0800466c 	.word	0x0800466c

080045b0 <memset>:
 80045b0:	0003      	movs	r3, r0
 80045b2:	1882      	adds	r2, r0, r2
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	7019      	strb	r1, [r3, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <_init>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr

080045cc <_fini>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr
